(program (block (statement (declaration (varDeclaration global (type (identifier i32)) : (varDecUnit (identifier times) = (initializer (exp (postfixExpression (primaryExpression (number 0)))))))))) (block (sub_def sub (sub_name (identifier bark)) : (body (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "The doggy went:"))))) )))) (statement (assignment (assignmentUnit (postfixExpression (primaryExpression (identifier barks)))) (assignOp =) (exp (postfixExpression (primaryExpression (number 10)))))) (statement (while_loop while (exp (exp (postfixExpression (primaryExpression (identifier barks)))) (relational >) (exp (postfixExpression (primaryExpression (number 0))))) : (body (statement (assignment (assignmentUnit (postfixExpression (primaryExpression (identifier barks)))) (assignOp =) (exp (exp (postfixExpression (primaryExpression (identifier barks)))) (additive -) (exp (postfixExpression (primaryExpression (number 1))))))) (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "WOOF!"))))) )))) (statement (assignment (assignmentUnit (postfixExpression (primaryExpression (identifier times)))) (assignOp =) (exp (exp (postfixExpression (primaryExpression (identifier times)))) (additive +) (exp (postfixExpression (primaryExpression (number 1))))))) (statement (conditional if (exp (exp (postfixExpression (primaryExpression (identifier times)))) (equality ==) (exp (postfixExpression (primaryExpression (number 1))))) : (body (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "First woof"))))) ))))) (if_elseif else if) (exp (exp (postfixExpression (primaryExpression (identifier times)))) (equality ==) (exp (postfixExpression (primaryExpression (number 2))))) : (body (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "Second woof"))))) ))))) (if_elseif else if) (exp (exp (postfixExpression (primaryExpression (identifier times)))) (equality ==) (exp (postfixExpression (primaryExpression (number 3))))) : (body (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "Third woof"))))) ))))) (if_else else) : (body (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "SHUT UP, DOG"))))) ))))) end))) end))) end)) (block (statement (postfixExpression (postfixExpression (primaryExpression (identifier bark))) ( )))) (block (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (exp (exp (postfixExpression (primaryExpression (string "The dog barked ")))) (additive +) (exp (postfixExpression (primaryExpression (identifier times))))) (additive +) (exp (postfixExpression (primaryExpression (string " times!")))))) ))))) (block (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "This is an example of side effect"))))) ))))) <EOF>)