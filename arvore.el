(program (block (statement (declaration (varDeclaration global (type (identifier i32)) : (decUnit (identifier times) = (exp (postfixExpression (primaryExpression (number 0))))) , (decUnit (identifier numeros) (arrayDecUnit = (arrayLiteral [ (exp (postfixExpression (primaryExpression (number 1)))) , (exp (postfixExpression (primaryExpression (number 2)))) , (exp (postfixExpression (primaryExpression (number 3)))) , (exp (postfixExpression (primaryExpression (number 4)))) ]))))))) (block (sub_def sub (identifier fart) (parlist (par (type (identifier i32)) : (identifier loudness)) , (par (type (identifier i32)) : (identifier smell))) : (body (statement (declaration (varDeclaration var (type (identifier i32)) : (decUnit (identifier power_rating) = (exp (exp (postfixExpression (primaryExpression (identifier loudness)))) (multiplicative *) (exp (postfixExpression (postfixExpression (primaryExpression (identifier pow))) ( (expList (exp (postfixExpression (primaryExpression (identifier smell)))) , (exp (postfixExpression (primaryExpression (number 2))))) ))))))))) fim)) (block (func_def func (type (identifier i32)) (identifier somar) (parlist (par (identifier a)) , (par (identifier b))) : (body (statement (retStatement retorna (exp (exp (postfixExpression (primaryExpression (identifier a)))) (additive +) (exp (postfixExpression (primaryExpression (identifier b)))))))) fim)) (block (sub_def sub (identifier bark) : (body (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "The doggy went:"))))) )))) (statement (declaration (varDeclaration var (type (identifier i32)) : (decUnit (identifier barks) = (exp (postfixExpression (primaryExpression (number 10)))))))) (statement (while_loop while (exp (exp (postfixExpression (primaryExpression (identifier barks)))) (relational >) (exp (postfixExpression (primaryExpression (number 0))))) : (body (statement (assignment (assignmentUnit (postfixExpression (primaryExpression (identifier barks)))) (assignOp =) (exp (exp (postfixExpression (primaryExpression (identifier barks)))) (additive -) (exp (postfixExpression (primaryExpression (number 1))))))) (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "WOOF!"))))) )))) (statement (assignment (assignmentUnit (postfixExpression (primaryExpression (identifier times)))) (assignOp =) (exp (exp (postfixExpression (primaryExpression (identifier times)))) (additive +) (exp (postfixExpression (primaryExpression (number 1))))))) (statement (conditional if (exp (exp (postfixExpression (primaryExpression (identifier times)))) (equality ==) (exp (postfixExpression (primaryExpression (number 1))))) : (body (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "First woof"))))) ))))) (if_elseif else if) (exp (exp (postfixExpression (primaryExpression (identifier times)))) (equality ==) (exp (postfixExpression (primaryExpression (number 2))))) : (body (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "Second woof"))))) ))))) (if_elseif else if) (exp (exp (postfixExpression (primaryExpression (identifier times)))) (equality ==) (exp (postfixExpression (primaryExpression (number 3))))) : (body (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "Third woof"))))) ))))) (if_else else) : (body (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "SHUT UP, DOG"))))) ))))) end))) end))) end)) (block (statement (postfixExpression (postfixExpression (primaryExpression (identifier bark))) ( )))) (block (statement (assignment (assignmentUnit (postfixExpression (primaryExpression (identifier x)))) , (assignmentUnit (postfixExpression (primaryExpression (identifier y)))) , (assignmentUnit (postfixExpression (primaryExpression (identifier z)))) (assignOp =) (exp (postfixExpression (primaryExpression (number 99))))))) (block (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (exp (exp (postfixExpression (primaryExpression (string "The dog barked ")))) (additive +) (exp (postfixExpression (primaryExpression (identifier times))))) (additive +) (exp (postfixExpression (primaryExpression (string " times!")))))) ))))) (block (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (primaryExpression (string "This is an example of side effect"))))) ))))) (block (statement (postfixExpression (postfixExpression (primaryExpression (identifier console))) (propOp .) (postfixExpression (postfixExpression (primaryExpression (identifier log))) ( (expList (exp (postfixExpression (postfixExpression (primaryExpression (identifier somar))) ( (expList (exp (postfixExpression (postfixExpression (primaryExpression (identifier somar))) ( (expList (exp (postfixExpression (primaryExpression (identifier x)))) , (exp (postfixExpression (primaryExpression (identifier y))))) ))) , (exp (postfixExpression (primaryExpression (identifier z))))) )))) ))))) <EOF>)