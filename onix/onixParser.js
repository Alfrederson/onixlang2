// Generated from C:\Users\ruy_g\OneDrive\√Årea de Trabalho\Transpileitor2\onix.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var onixVisitor = require('./onixVisitor').onixVisitor;

var grammarFileName = "onix.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003`\u02ce\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0003",
    "\u0002\u0007\u0002\u0090\n\u0002\f\u0002\u000e\u0002\u0093\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u009e\n\u0003\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00a3\n\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u00a8\n\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u00b9\n\u0006\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u00bd\n\u0007\u0003\b\u0007\b\u00c0\n\b\f\b\u000e\b\u00c3",
    "\u000b\b\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u00c9\n\t\f\t\u000e",
    "\t\u00cc\u000b\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0005\n\u00d5\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0005\n\u00e0\n\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00ec\n\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0005\n\u00f8\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0005\n\u0100\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0005\u000b\u0107\n\u000b\u0003\u000b\u0003\u000b",
    "\u0005\u000b\u010b\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007",
    "\f\u0112\n\f\f\f\u000e\f\u0115\u000b\f\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0007\r\u011d\n\r\f\r\u000e\r\u0120\u000b\r\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u0136\n\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u0141\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0149\n\u0012\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u014e\n\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u016a\n\u001c\u0005\u001c\u016c\n\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u0174\n\u001c\u0003\u001c\u0005\u001c\u0177\n\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u017d\n\u001d\f\u001d",
    "\u000e\u001d\u0180\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0007\u001d\u0187\n\u001d\f\u001d\u000e\u001d\u018a",
    "\u000b\u001d\u0005\u001d\u018c\n\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0007\u001e\u0197\n\u001e\f\u001e\u000e\u001e\u019a\u000b\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01a0\n",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    " \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u01b0",
    "\n!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003",
    "#\u0005#\u01c4\n#\u0003#\u0003#\u0003#\u0005#\u01c9\n#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003\'\u0003\'\u0003\'\u0005\'\u01e5\n\'\u0003(\u0003(\u0003",
    "(\u0003(\u0003)\u0003)\u0003)\u0003)\u0007)\u01ef\n)\f)\u000e)\u01f2",
    "\u000b)\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u01f9\n*\u0003+\u0003",
    "+\u0003+\u0005+\u01fe\n+\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u0205",
    "\n,\f,\u000e,\u0208\u000b,\u0003-\u0003-\u0003-\u0003-\u0007-\u020e",
    "\n-\f-\u000e-\u0211\u000b-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u021e\n.\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0007/\u0225\n/\f/\u000e/\u0228\u000b/\u00030\u0003",
    "0\u00031\u00031\u00031\u00071\u022f\n1\f1\u000e1\u0232\u000b1\u0003",
    "1\u00031\u00031\u00032\u00032\u00033\u00033\u00034\u00034\u00035\u0003",
    "5\u00035\u00055\u0240\n5\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00056\u024a\n6\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00056\u0253\n6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00076\u025f\n6\f6\u000e6\u0262\u000b6\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u026d\n7\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00077\u029a\n7\f7\u000e7\u029d\u000b7\u00038\u0003",
    "8\u00039\u00039\u0003:\u0003:\u0003;\u0003;\u0003<\u0003<\u0003=\u0003",
    "=\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0003A\u0003A\u0003B\u0003",
    "B\u0003B\u0007B\u02b6\nB\fB\u000eB\u02b9\u000bB\u0003C\u0003C\u0003",
    "D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u02c5\nE\u0003",
    "E\u0005E\u02c8\nE\u0003F\u0003F\u0003G\u0003G\u0003G\u0003\u0091\u0004",
    "jlH\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u0002\u000e\u0004\u0002--22\u0003",
    "\u0002DE\u0004\u0002\u000b\u000b\u0019!\u0003\u000234\u0004\u0002,,",
    "/0\u0005\u0002\u000e\u000e\u0010\u0010\u0012\u0012\u0003\u0002\f\r\u0003",
    "\u0002()\u0003\u0002\u0013\u0016\u0003\u0002\u0017\u0018\u0004\u0002",
    "QRZ]\u0004\u0002\r\r\u0011\u0011\u0002\u02e8\u0002\u0091\u0003\u0002",
    "\u0002\u0002\u0004\u009d\u0003\u0002\u0002\u0002\u0006\u009f\u0003\u0002",
    "\u0002\u0002\b\u00a4\u0003\u0002\u0002\u0002\n\u00b8\u0003\u0002\u0002",
    "\u0002\f\u00bc\u0003\u0002\u0002\u0002\u000e\u00c1\u0003\u0002\u0002",
    "\u0002\u0010\u00c4\u0003\u0002\u0002\u0002\u0012\u00ff\u0003\u0002\u0002",
    "\u0002\u0014\u0101\u0003\u0002\u0002\u0002\u0016\u010c\u0003\u0002\u0002",
    "\u0002\u0018\u0118\u0003\u0002\u0002\u0002\u001a\u0123\u0003\u0002\u0002",
    "\u0002\u001c\u0127\u0003\u0002\u0002\u0002\u001e\u012b\u0003\u0002\u0002",
    "\u0002 \u012f\u0003\u0002\u0002\u0002\"\u0148\u0003\u0002\u0002\u0002",
    "$\u014a\u0003\u0002\u0002\u0002&\u014f\u0003\u0002\u0002\u0002(\u0153",
    "\u0003\u0002\u0002\u0002*\u0157\u0003\u0002\u0002\u0002,\u0159\u0003",
    "\u0002\u0002\u0002.\u015c\u0003\u0002\u0002\u00020\u015f\u0003\u0002",
    "\u0002\u00022\u0161\u0003\u0002\u0002\u00024\u0163\u0003\u0002\u0002",
    "\u00026\u0176\u0003\u0002\u0002\u00028\u018b\u0003\u0002\u0002\u0002",
    ":\u018d\u0003\u0002\u0002\u0002<\u01a3\u0003\u0002\u0002\u0002>\u01a6",
    "\u0003\u0002\u0002\u0002@\u01a8\u0003\u0002\u0002\u0002B\u01b5\u0003",
    "\u0002\u0002\u0002D\u01c0\u0003\u0002\u0002\u0002F\u01d0\u0003\u0002",
    "\u0002\u0002H\u01d6\u0003\u0002\u0002\u0002J\u01dc\u0003\u0002\u0002",
    "\u0002L\u01e4\u0003\u0002\u0002\u0002N\u01e6\u0003\u0002\u0002\u0002",
    "P\u01ea\u0003\u0002\u0002\u0002R\u01f8\u0003\u0002\u0002\u0002T\u01fa",
    "\u0003\u0002\u0002\u0002V\u01ff\u0003\u0002\u0002\u0002X\u0209\u0003",
    "\u0002\u0002\u0002Z\u021d\u0003\u0002\u0002\u0002\\\u021f\u0003\u0002",
    "\u0002\u0002^\u0229\u0003\u0002\u0002\u0002`\u022b\u0003\u0002\u0002",
    "\u0002b\u0236\u0003\u0002\u0002\u0002d\u0238\u0003\u0002\u0002\u0002",
    "f\u023a\u0003\u0002\u0002\u0002h\u023f\u0003\u0002\u0002\u0002j\u0249",
    "\u0003\u0002\u0002\u0002l\u026c\u0003\u0002\u0002\u0002n\u029e\u0003",
    "\u0002\u0002\u0002p\u02a0\u0003\u0002\u0002\u0002r\u02a2\u0003\u0002",
    "\u0002\u0002t\u02a4\u0003\u0002\u0002\u0002v\u02a6\u0003\u0002\u0002",
    "\u0002x\u02a8\u0003\u0002\u0002\u0002z\u02aa\u0003\u0002\u0002\u0002",
    "|\u02ac\u0003\u0002\u0002\u0002~\u02ae\u0003\u0002\u0002\u0002\u0080",
    "\u02b0\u0003\u0002\u0002\u0002\u0082\u02b2\u0003\u0002\u0002\u0002\u0084",
    "\u02ba\u0003\u0002\u0002\u0002\u0086\u02bc\u0003\u0002\u0002\u0002\u0088",
    "\u02c4\u0003\u0002\u0002\u0002\u008a\u02c9\u0003\u0002\u0002\u0002\u008c",
    "\u02cb\u0003\u0002\u0002\u0002\u008e\u0090\u0005\u0004\u0003\u0002\u008f",
    "\u008e\u0003\u0002\u0002\u0002\u0090\u0093\u0003\u0002\u0002\u0002\u0091",
    "\u0092\u0003\u0002\u0002\u0002\u0091\u008f\u0003\u0002\u0002\u0002\u0092",
    "\u0094\u0003\u0002\u0002\u0002\u0093\u0091\u0003\u0002\u0002\u0002\u0094",
    "\u0095\u0007\u0002\u0002\u0003\u0095\u0003\u0003\u0002\u0002\u0002\u0096",
    "\u009e\u0005\u0006\u0004\u0002\u0097\u009e\u0005\b\u0005\u0002\u0098",
    "\u009e\u0005\"\u0012\u0002\u0099\u009e\u0005\u0012\n\u0002\u009a\u009e",
    "\u0005\u0010\t\u0002\u009b\u009e\u0005\f\u0007\u0002\u009c\u009e\u0005",
    "\n\u0006\u0002\u009d\u0096\u0003\u0002\u0002\u0002\u009d\u0097\u0003",
    "\u0002\u0002\u0002\u009d\u0098\u0003\u0002\u0002\u0002\u009d\u0099\u0003",
    "\u0002\u0002\u0002\u009d\u009a\u0003\u0002\u0002\u0002\u009d\u009b\u0003",
    "\u0002\u0002\u0002\u009d\u009c\u0003\u0002\u0002\u0002\u009e\u0005\u0003",
    "\u0002\u0002\u0002\u009f\u00a2\u00077\u0002\u0002\u00a0\u00a3\u0005",
    "\u0086D\u0002\u00a1\u00a3\u0007\u0003\u0002\u0002\u00a2\u00a0\u0003",
    "\u0002\u0002\u0002\u00a2\u00a1\u0003\u0002\u0002\u0002\u00a3\u0007\u0003",
    "\u0002\u0002\u0002\u00a4\u00a7\u00078\u0002\u0002\u00a5\u00a8\u0005",
    "\u0086D\u0002\u00a6\u00a8\u0007\u0003\u0002\u0002\u00a7\u00a5\u0003",
    "\u0002\u0002\u0002\u00a7\u00a6\u0003\u0002\u0002\u0002\u00a8\t\u0003",
    "\u0002\u0002\u0002\u00a9\u00b9\u0005L\'\u0002\u00aa\u00b9\u0005`1\u0002",
    "\u00ab\u00b9\u0005j6\u0002\u00ac\u00b9\u0005:\u001e\u0002\u00ad\u00b9",
    "\u0005@!\u0002\u00ae\u00b9\u0005F$\u0002\u00af\u00b9\u0005H%\u0002\u00b0",
    "\u00b9\u0005D#\u0002\u00b1\u00b9\u0005J&\u0002\u00b2\u00b9\u0005B\"",
    "\u0002\u00b3\u00b9\u0005,\u0017\u0002\u00b4\u00b9\u0005.\u0018\u0002",
    "\u00b5\u00b9\u00050\u0019\u0002\u00b6\u00b9\u00052\u001a\u0002\u00b7",
    "\u00b9\u00054\u001b\u0002\u00b8\u00a9\u0003\u0002\u0002\u0002\u00b8",
    "\u00aa\u0003\u0002\u0002\u0002\u00b8\u00ab\u0003\u0002\u0002\u0002\u00b8",
    "\u00ac\u0003\u0002\u0002\u0002\u00b8\u00ad\u0003\u0002\u0002\u0002\u00b8",
    "\u00ae\u0003\u0002\u0002\u0002\u00b8\u00af\u0003\u0002\u0002\u0002\u00b8",
    "\u00b0\u0003\u0002\u0002\u0002\u00b8\u00b1\u0003\u0002\u0002\u0002\u00b8",
    "\u00b2\u0003\u0002\u0002\u0002\u00b8\u00b3\u0003\u0002\u0002\u0002\u00b8",
    "\u00b4\u0003\u0002\u0002\u0002\u00b8\u00b5\u0003\u0002\u0002\u0002\u00b8",
    "\u00b6\u0003\u0002\u0002\u0002\u00b8\u00b7\u0003\u0002\u0002\u0002\u00b9",
    "\u000b\u0003\u0002\u0002\u0002\u00ba\u00bd\u0005\u0016\f\u0002\u00bb",
    "\u00bd\u0005\u0018\r\u0002\u00bc\u00ba\u0003\u0002\u0002\u0002\u00bc",
    "\u00bb\u0003\u0002\u0002\u0002\u00bd\r\u0003\u0002\u0002\u0002\u00be",
    "\u00c0\u0005\n\u0006\u0002\u00bf\u00be\u0003\u0002\u0002\u0002\u00c0",
    "\u00c3\u0003\u0002\u0002\u0002\u00c1\u00bf\u0003\u0002\u0002\u0002\u00c1",
    "\u00c2\u0003\u0002\u0002\u0002\u00c2\u000f\u0003\u0002\u0002\u0002\u00c3",
    "\u00c1\u0003\u0002\u0002\u0002\u00c4\u00c5\u0007;\u0002\u0002\u00c5",
    "\u00c6\u0005\u008cG\u0002\u00c6\u00ca\u0007-\u0002\u0002\u00c7\u00c9",
    "\u0005L\'\u0002\u00c8\u00c7\u0003\u0002\u0002\u0002\u00c9\u00cc\u0003",
    "\u0002\u0002\u0002\u00ca\u00c8\u0003\u0002\u0002\u0002\u00ca\u00cb\u0003",
    "\u0002\u0002\u0002\u00cb\u00cd\u0003\u0002\u0002\u0002\u00cc\u00ca\u0003",
    "\u0002\u0002\u0002\u00cd\u00ce\u0007N\u0002\u0002\u00ce\u0011\u0003",
    "\u0002\u0002\u0002\u00cf\u00d0\u0007:\u0002\u0002\u00d0\u00d4\u0005",
    "\u0088E\u0002\u00d1\u00d2\u0005\u0088E\u0002\u00d2\u00d3\u0007,\u0002",
    "\u0002\u00d3\u00d5\u0003\u0002\u0002\u0002\u00d4\u00d1\u0003\u0002\u0002",
    "\u0002\u00d4\u00d5\u0003\u0002\u0002\u0002\u00d5\u00d6\u0003\u0002\u0002",
    "\u0002\u00d6\u00d7\u0005\u008cG\u0002\u00d7\u00d8\u0007P\u0002\u0002",
    "\u00d8\u00d9\u0005l7\u0002\u00d9\u0100\u0003\u0002\u0002\u0002\u00da",
    "\u00db\u0007:\u0002\u0002\u00db\u00df\u0005\u0088E\u0002\u00dc\u00dd",
    "\u0005\u0088E\u0002\u00dd\u00de\u0007,\u0002\u0002\u00de\u00e0\u0003",
    "\u0002\u0002\u0002\u00df\u00dc\u0003\u0002\u0002\u0002\u00df\u00e0\u0003",
    "\u0002\u0002\u0002\u00e0\u00e1\u0003\u0002\u0002\u0002\u00e1\u00e2\u0005",
    "\u008cG\u0002\u00e2\u00e3\u00058\u001d\u0002\u00e3\u00e4\u0007P\u0002",
    "\u0002\u00e4\u00e5\u0005l7\u0002\u00e5\u0100\u0003\u0002\u0002\u0002",
    "\u00e6\u00e7\u0007:\u0002\u0002\u00e7\u00eb\u0005\u0088E\u0002\u00e8",
    "\u00e9\u0005\u0088E\u0002\u00e9\u00ea\u0007,\u0002\u0002\u00ea\u00ec",
    "\u0003\u0002\u0002\u0002\u00eb\u00e8\u0003\u0002\u0002\u0002\u00eb\u00ec",
    "\u0003\u0002\u0002\u0002\u00ec\u00ed\u0003\u0002\u0002\u0002\u00ed\u00ee",
    "\u0005\u008cG\u0002\u00ee\u00ef\u0007-\u0002\u0002\u00ef\u00f0\u0005",
    "\u000e\b\u0002\u00f0\u00f1\u0007N\u0002\u0002\u00f1\u0100\u0003\u0002",
    "\u0002\u0002\u00f2\u00f3\u0007:\u0002\u0002\u00f3\u00f7\u0005\u0088",
    "E\u0002\u00f4\u00f5\u0005\u0088E\u0002\u00f5\u00f6\u0007,\u0002\u0002",
    "\u00f6\u00f8\u0003\u0002\u0002\u0002\u00f7\u00f4\u0003\u0002\u0002\u0002",
    "\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002",
    "\u00f9\u00fa\u0005\u008cG\u0002\u00fa\u00fb\u00058\u001d\u0002\u00fb",
    "\u00fc\u0007-\u0002\u0002\u00fc\u00fd\u0005\u000e\b\u0002\u00fd\u00fe",
    "\u0007N\u0002\u0002\u00fe\u0100\u0003\u0002\u0002\u0002\u00ff\u00cf",
    "\u0003\u0002\u0002\u0002\u00ff\u00da\u0003\u0002\u0002\u0002\u00ff\u00e6",
    "\u0003\u0002\u0002\u0002\u00ff\u00f2\u0003\u0002\u0002\u0002\u0100\u0013",
    "\u0003\u0002\u0002\u0002\u0101\u0102\u0007:\u0002\u0002\u0102\u0106",
    "\u0005\u0088E\u0002\u0103\u0104\u0005\u0088E\u0002\u0104\u0105\u0007",
    ",\u0002\u0002\u0105\u0107\u0003\u0002\u0002\u0002\u0106\u0103\u0003",
    "\u0002\u0002\u0002\u0106\u0107\u0003\u0002\u0002\u0002\u0107\u0108\u0003",
    "\u0002\u0002\u0002\u0108\u010a\u0005\u008cG\u0002\u0109\u010b\u0005",
    "8\u001d\u0002\u010a\u0109\u0003\u0002\u0002\u0002\u010a\u010b\u0003",
    "\u0002\u0002\u0002\u010b\u0015\u0003\u0002\u0002\u0002\u010c\u010d\u0007",
    "J\u0002\u0002\u010d\u0113\u0007-\u0002\u0002\u010e\u0112\u0005\u001a",
    "\u000e\u0002\u010f\u0112\u0005&\u0014\u0002\u0110\u0112\u0005\u001c",
    "\u000f\u0002\u0111\u010e\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002",
    "\u0002\u0002\u0111\u0110\u0003\u0002\u0002\u0002\u0112\u0115\u0003\u0002",
    "\u0002\u0002\u0113\u0111\u0003\u0002\u0002\u0002\u0113\u0114\u0003\u0002",
    "\u0002\u0002\u0114\u0116\u0003\u0002\u0002\u0002\u0115\u0113\u0003\u0002",
    "\u0002\u0002\u0116\u0117\u0007N\u0002\u0002\u0117\u0017\u0003\u0002",
    "\u0002\u0002\u0118\u0119\u0007I\u0002\u0002\u0119\u011e\u0007-\u0002",
    "\u0002\u011a\u011d\u0005\u001e\u0010\u0002\u011b\u011d\u0005(\u0015",
    "\u0002\u011c\u011a\u0003\u0002\u0002\u0002\u011c\u011b\u0003\u0002\u0002",
    "\u0002\u011d\u0120\u0003\u0002\u0002\u0002\u011e\u011c\u0003\u0002\u0002",
    "\u0002\u011e\u011f\u0003\u0002\u0002\u0002\u011f\u0121\u0003\u0002\u0002",
    "\u0002\u0120\u011e\u0003\u0002\u0002\u0002\u0121\u0122\u0007N\u0002",
    "\u0002\u0122\u0019\u0003\u0002\u0002\u0002\u0123\u0124\u0005\u0086D",
    "\u0002\u0124\u0125\u0007-\u0002\u0002\u0125\u0126\u0005\u0014\u000b",
    "\u0002\u0126\u001b\u0003\u0002\u0002\u0002\u0127\u0128\u0005\u0086D",
    "\u0002\u0128\u0129\u0007-\u0002\u0002\u0129\u012a\u0005L\'\u0002\u012a",
    "\u001d\u0003\u0002\u0002\u0002\u012b\u012c\u0005\u0084C\u0002\u012c",
    "\u012d\u0007-\u0002\u0002\u012d\u012e\u0005\u0014\u000b\u0002\u012e",
    "\u001f\u0003\u0002\u0002\u0002\u012f\u0130\u0005\u008cG\u0002\u0130",
    "!\u0003\u0002\u0002\u0002\u0131\u0135\u00079\u0002\u0002\u0132\u0133",
    "\u0005\u0088E\u0002\u0133\u0134\u0007,\u0002\u0002\u0134\u0136\u0003",
    "\u0002\u0002\u0002\u0135\u0132\u0003\u0002\u0002\u0002\u0135\u0136\u0003",
    "\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u0138\u0005",
    " \u0011\u0002\u0138\u0139\u0007-\u0002\u0002\u0139\u013a\u0005\u000e",
    "\b\u0002\u013a\u013b\u0007N\u0002\u0002\u013b\u0149\u0003\u0002\u0002",
    "\u0002\u013c\u0140\u00079\u0002\u0002\u013d\u013e\u0005\u0088E\u0002",
    "\u013e\u013f\u0007,\u0002\u0002\u013f\u0141\u0003\u0002\u0002\u0002",
    "\u0140\u013d\u0003\u0002\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002",
    "\u0141\u0142\u0003\u0002\u0002\u0002\u0142\u0143\u0005 \u0011\u0002",
    "\u0143\u0144\u00058\u001d\u0002\u0144\u0145\u0007-\u0002\u0002\u0145",
    "\u0146\u0005\u000e\b\u0002\u0146\u0147\u0007N\u0002\u0002\u0147\u0149",
    "\u0003\u0002\u0002\u0002\u0148\u0131\u0003\u0002\u0002\u0002\u0148\u013c",
    "\u0003\u0002\u0002\u0002\u0149#\u0003\u0002\u0002\u0002\u014a\u014b",
    "\u00079\u0002\u0002\u014b\u014d\u0005 \u0011\u0002\u014c\u014e\u0005",
    "8\u001d\u0002\u014d\u014c\u0003\u0002\u0002\u0002\u014d\u014e\u0003",
    "\u0002\u0002\u0002\u014e%\u0003\u0002\u0002\u0002\u014f\u0150\u0005",
    "\u0086D\u0002\u0150\u0151\u0007-\u0002\u0002\u0151\u0152\u0005$\u0013",
    "\u0002\u0152\'\u0003\u0002\u0002\u0002\u0153\u0154\u0005\u0084C\u0002",
    "\u0154\u0155\u0007-\u0002\u0002\u0155\u0156\u0005$\u0013\u0002\u0156",
    ")\u0003\u0002\u0002\u0002\u0157\u0158\u0007+\u0002\u0002\u0158+\u0003",
    "\u0002\u0002\u0002\u0159\u015a\u0007X\u0002\u0002\u015a\u015b\u0007",
    "-\u0002\u0002\u015b-\u0003\u0002\u0002\u0002\u015c\u015d\u00075\u0002",
    "\u0002\u015d\u015e\u0007X\u0002\u0002\u015e/\u0003\u0002\u0002\u0002",
    "\u015f\u0160\u0007A\u0002\u0002\u01601\u0003\u0002\u0002\u0002\u0161",
    "\u0162\u0007B\u0002\u0002\u01623\u0003\u0002\u0002\u0002\u0163\u0164",
    "\u0007O\u0002\u0002\u0164\u0165\u0005l7\u0002\u01655\u0003\u0002\u0002",
    "\u0002\u0166\u0169\u0005\u0088E\u0002\u0167\u0168\u0007\t\u0002\u0002",
    "\u0168\u016a\u0007\n\u0002\u0002\u0169\u0167\u0003\u0002\u0002\u0002",
    "\u0169\u016a\u0003\u0002\u0002\u0002\u016a\u016c\u0003\u0002\u0002\u0002",
    "\u016b\u0166\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002",
    "\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u0177\u0005\u008cG\u0002",
    "\u016e\u016f\u0005\u008cG\u0002\u016f\u0170\u0007-\u0002\u0002\u0170",
    "\u0173\u0005\u0088E\u0002\u0171\u0172\u0007\t\u0002\u0002\u0172\u0174",
    "\u0007\n\u0002\u0002\u0173\u0171\u0003\u0002\u0002\u0002\u0173\u0174",
    "\u0003\u0002\u0002\u0002\u0174\u0177\u0003\u0002\u0002\u0002\u0175\u0177",
    "\u0005*\u0016\u0002\u0176\u016b\u0003\u0002\u0002\u0002\u0176\u016e",
    "\u0003\u0002\u0002\u0002\u0176\u0175\u0003\u0002\u0002\u0002\u01777",
    "\u0003\u0002\u0002\u0002\u0178\u0179\u0007\u0005\u0002\u0002\u0179\u017e",
    "\u00056\u001c\u0002\u017a\u017b\u0007.\u0002\u0002\u017b\u017d\u0005",
    "6\u001c\u0002\u017c\u017a\u0003\u0002\u0002\u0002\u017d\u0180\u0003",
    "\u0002\u0002\u0002\u017e\u017c\u0003\u0002\u0002\u0002\u017e\u017f\u0003",
    "\u0002\u0002\u0002\u017f\u0181\u0003\u0002\u0002\u0002\u0180\u017e\u0003",
    "\u0002\u0002\u0002\u0181\u0182\u0007\u0006\u0002\u0002\u0182\u018c\u0003",
    "\u0002\u0002\u0002\u0183\u0188\u00056\u001c\u0002\u0184\u0185\u0007",
    ".\u0002\u0002\u0185\u0187\u00056\u001c\u0002\u0186\u0184\u0003\u0002",
    "\u0002\u0002\u0187\u018a\u0003\u0002\u0002\u0002\u0188\u0186\u0003\u0002",
    "\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189\u018c\u0003\u0002",
    "\u0002\u0002\u018a\u0188\u0003\u0002\u0002\u0002\u018b\u0178\u0003\u0002",
    "\u0002\u0002\u018b\u0183\u0003\u0002\u0002\u0002\u018c9\u0003\u0002",
    "\u0002\u0002\u018d\u018e\u0007L\u0002\u0002\u018e\u018f\u0005l7\u0002",
    "\u018f\u0190\t\u0002\u0002\u0002\u0190\u0198\u0005\u000e\b\u0002\u0191",
    "\u0192\u0005<\u001f\u0002\u0192\u0193\u0005l7\u0002\u0193\u0194\t\u0002",
    "\u0002\u0002\u0194\u0195\u0005\u000e\b\u0002\u0195\u0197\u0003\u0002",
    "\u0002\u0002\u0196\u0191\u0003\u0002\u0002\u0002\u0197\u019a\u0003\u0002",
    "\u0002\u0002\u0198\u0196\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002",
    "\u0002\u0002\u0199\u019f\u0003\u0002\u0002\u0002\u019a\u0198\u0003\u0002",
    "\u0002\u0002\u019b\u019c\u0005> \u0002\u019c\u019d\t\u0002\u0002\u0002",
    "\u019d\u019e\u0005\u000e\b\u0002\u019e\u01a0\u0003\u0002\u0002\u0002",
    "\u019f\u019b\u0003\u0002\u0002\u0002\u019f\u01a0\u0003\u0002\u0002\u0002",
    "\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a2\u0007N\u0002\u0002",
    "\u01a2;\u0003\u0002\u0002\u0002\u01a3\u01a4\u0007M\u0002\u0002\u01a4",
    "\u01a5\u0007L\u0002\u0002\u01a5=\u0003\u0002\u0002\u0002\u01a6\u01a7",
    "\u0007M\u0002\u0002\u01a7?\u0003\u0002\u0002\u0002\u01a8\u01a9\u0007",
    "?\u0002\u0002\u01a9\u01aa\u0005`1\u0002\u01aa\u01ab\u0007.\u0002\u0002",
    "\u01ab\u01ac\u0005l7\u0002\u01ac\u01af\u0007.\u0002\u0002\u01ad\u01b0",
    "\u0005`1\u0002\u01ae\u01b0\u0005j6\u0002\u01af\u01ad\u0003\u0002\u0002",
    "\u0002\u01af\u01ae\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003\u0002\u0002",
    "\u0002\u01b1\u01b2\u0007-\u0002\u0002\u01b2\u01b3\u0005\u000e\b\u0002",
    "\u01b3\u01b4\u0007N\u0002\u0002\u01b4A\u0003\u0002\u0002\u0002\u01b5",
    "\u01b6\u0007@\u0002\u0002\u01b6\u01b7\u0007C\u0002\u0002\u01b7\u01b8",
    "\u0005\u008cG\u0002\u01b8\u01b9\t\u0003\u0002\u0002\u01b9\u01ba\u0005",
    "l7\u0002\u01ba\u01bb\u0007*\u0002\u0002\u01bb\u01bc\u0005l7\u0002\u01bc",
    "\u01bd\u0007-\u0002\u0002\u01bd\u01be\u0005\u000e\b\u0002\u01be\u01bf",
    "\u0007N\u0002\u0002\u01bfC\u0003\u0002\u0002\u0002\u01c0\u01c1\u0007",
    "@\u0002\u0002\u01c1\u01c3\u0007C\u0002\u0002\u01c2\u01c4\u0007\"\u0002",
    "\u0002\u01c3\u01c2\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002",
    "\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5\u01c8\u0005\u008cG",
    "\u0002\u01c6\u01c7\u0007.\u0002\u0002\u01c7\u01c9\u0005\u008cG\u0002",
    "\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002",
    "\u01c9\u01ca\u0003\u0002\u0002\u0002\u01ca\u01cb\t\u0003\u0002\u0002",
    "\u01cb\u01cc\u0005j6\u0002\u01cc\u01cd\u0007-\u0002\u0002\u01cd\u01ce",
    "\u0005\u000e\b\u0002\u01ce\u01cf\u0007N\u0002\u0002\u01cfE\u0003\u0002",
    "\u0002\u0002\u01d0\u01d1\u0007F\u0002\u0002\u01d1\u01d2\u0005l7\u0002",
    "\u01d2\u01d3\u0007-\u0002\u0002\u01d3\u01d4\u0005\u000e\b\u0002\u01d4",
    "\u01d5\u0007N\u0002\u0002\u01d5G\u0003\u0002\u0002\u0002\u01d6\u01d7",
    "\u0007G\u0002\u0002\u01d7\u01d8\u0007-\u0002\u0002\u01d8\u01d9\u0005",
    "\u000e\b\u0002\u01d9\u01da\u0007H\u0002\u0002\u01da\u01db\u0005l7\u0002",
    "\u01dbI\u0003\u0002\u0002\u0002\u01dc\u01dd\u0007<\u0002\u0002\u01dd",
    "\u01de\u0007-\u0002\u0002\u01de\u01df\u0005\u000e\b\u0002\u01df\u01e0",
    "\u0007N\u0002\u0002\u01e0K\u0003\u0002\u0002\u0002\u01e1\u01e5\u0005",
    "V,\u0002\u01e2\u01e5\u0005\\/\u0002\u01e3\u01e5\u0005P)\u0002\u01e4",
    "\u01e1\u0003\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e4",
    "\u01e3\u0003\u0002\u0002\u0002\u01e5M\u0003\u0002\u0002\u0002\u01e6",
    "\u01e7\u0005\u008cG\u0002\u01e7\u01e8\u0007\u000b\u0002\u0002\u01e8",
    "\u01e9\u0005l7\u0002\u01e9O\u0003\u0002\u0002\u0002\u01ea\u01eb\u0007",
    "=\u0002\u0002\u01eb\u01f0\u0005N(\u0002\u01ec\u01ed\u0007.\u0002\u0002",
    "\u01ed\u01ef\u0005N(\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002\u01ef",
    "\u01f2\u0003\u0002\u0002\u0002\u01f0\u01ee\u0003\u0002\u0002\u0002\u01f0",
    "\u01f1\u0003\u0002\u0002\u0002\u01f1Q\u0003\u0002\u0002\u0002\u01f2",
    "\u01f0\u0003\u0002\u0002\u0002\u01f3\u01f4\u0007\u0005\u0002\u0002\u01f4",
    "\u01f5\u0005\u0082B\u0002\u01f5\u01f6\u0007\u0006\u0002\u0002\u01f6",
    "\u01f9\u0003\u0002\u0002\u0002\u01f7\u01f9\u0005l7\u0002\u01f8\u01f3",
    "\u0003\u0002\u0002\u0002\u01f8\u01f7\u0003\u0002\u0002\u0002\u01f9S",
    "\u0003\u0002\u0002\u0002\u01fa\u01fd\u0005\u008cG\u0002\u01fb\u01fc",
    "\u0007\u000b\u0002\u0002\u01fc\u01fe\u0005R*\u0002\u01fd\u01fb\u0003",
    "\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002\u0002\u01feU\u0003",
    "\u0002\u0002\u0002\u01ff\u0200\u0007>\u0002\u0002\u0200\u0201\u0005",
    "\u0088E\u0002\u0201\u0206\u0005T+\u0002\u0202\u0203\u0007.\u0002\u0002",
    "\u0203\u0205\u0005T+\u0002\u0204\u0202\u0003\u0002\u0002\u0002\u0205",
    "\u0208\u0003\u0002\u0002\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0206",
    "\u0207\u0003\u0002\u0002\u0002\u0207W\u0003\u0002\u0002\u0002\u0208",
    "\u0206\u0003\u0002\u0002\u0002\u0209\u020a\u0007\t\u0002\u0002\u020a",
    "\u020f\u0005R*\u0002\u020b\u020c\u0007.\u0002\u0002\u020c\u020e\u0005",
    "R*\u0002\u020d\u020b\u0003\u0002\u0002\u0002\u020e\u0211\u0003\u0002",
    "\u0002\u0002\u020f\u020d\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002",
    "\u0002\u0002\u0210\u0212\u0003\u0002\u0002\u0002\u0211\u020f\u0003\u0002",
    "\u0002\u0002\u0212\u0213\u0007\n\u0002\u0002\u0213Y\u0003\u0002\u0002",
    "\u0002\u0214\u0215\u0005\u008cG\u0002\u0215\u0216\u0007\t\u0002\u0002",
    "\u0216\u0217\u0005l7\u0002\u0217\u0218\u0007\n\u0002\u0002\u0218\u021e",
    "\u0003\u0002\u0002\u0002\u0219\u021a\u0005\u008cG\u0002\u021a\u021b",
    "\u0007\u000b\u0002\u0002\u021b\u021c\u0005X-\u0002\u021c\u021e\u0003",
    "\u0002\u0002\u0002\u021d\u0214\u0003\u0002\u0002\u0002\u021d\u0219\u0003",
    "\u0002\u0002\u0002\u021e[\u0003\u0002\u0002\u0002\u021f\u0220\u0007",
    ">\u0002\u0002\u0220\u0221\u0005\u0088E\u0002\u0221\u0226\u0005Z.\u0002",
    "\u0222\u0223\u0007.\u0002\u0002\u0223\u0225\u0005Z.\u0002\u0224\u0222",
    "\u0003\u0002\u0002\u0002\u0225\u0228\u0003\u0002\u0002\u0002\u0226\u0224",
    "\u0003\u0002\u0002\u0002\u0226\u0227\u0003\u0002\u0002\u0002\u0227]",
    "\u0003\u0002\u0002\u0002\u0228\u0226\u0003\u0002\u0002\u0002\u0229\u022a",
    "\u0005j6\u0002\u022a_\u0003\u0002\u0002\u0002\u022b\u0230\u0005^0\u0002",
    "\u022c\u022d\u0007.\u0002\u0002\u022d\u022f\u0005^0\u0002\u022e\u022c",
    "\u0003\u0002\u0002\u0002\u022f\u0232\u0003\u0002\u0002\u0002\u0230\u022e",
    "\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002\u0002\u0002\u0231\u0233",
    "\u0003\u0002\u0002\u0002\u0232\u0230\u0003\u0002\u0002\u0002\u0233\u0234",
    "\u0005b2\u0002\u0234\u0235\u0005l7\u0002\u0235a\u0003\u0002\u0002\u0002",
    "\u0236\u0237\t\u0004\u0002\u0002\u0237c\u0003\u0002\u0002\u0002\u0238",
    "\u0239\t\u0005\u0002\u0002\u0239e\u0003\u0002\u0002\u0002\u023a\u023b",
    "\t\u0006\u0002\u0002\u023bg\u0003\u0002\u0002\u0002\u023c\u0240\u0005",
    "\u008cG\u0002\u023d\u0240\u0005\u0084C\u0002\u023e\u0240\u0005\u0086",
    "D\u0002\u023f\u023c\u0003\u0002\u0002\u0002\u023f\u023d\u0003\u0002",
    "\u0002\u0002\u023f\u023e\u0003\u0002\u0002\u0002\u0240i\u0003\u0002",
    "\u0002\u0002\u0241\u0242\b6\u0001\u0002\u0242\u024a\u0005h5\u0002\u0243",
    "\u0244\u0007\"\u0002\u0002\u0244\u024a\u0005j6\u0004\u0245\u0246\u0007",
    "\u0007\u0002\u0002\u0246\u0247\u0005j6\u0002\u0247\u0248\u0007\b\u0002",
    "\u0002\u0248\u024a\u0003\u0002\u0002\u0002\u0249\u0241\u0003\u0002\u0002",
    "\u0002\u0249\u0243\u0003\u0002\u0002\u0002\u0249\u0245\u0003\u0002\u0002",
    "\u0002\u024a\u0260\u0003\u0002\u0002\u0002\u024b\u024c\f\b\u0002\u0002",
    "\u024c\u024d\u0005f4\u0002\u024d\u024e\u0005j6\t\u024e\u025f\u0003\u0002",
    "\u0002\u0002\u024f\u0250\f\t\u0002\u0002\u0250\u0252\u0007\u0005\u0002",
    "\u0002\u0251\u0253\u0005\u0082B\u0002\u0252\u0251\u0003\u0002\u0002",
    "\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0254\u0003\u0002\u0002",
    "\u0002\u0254\u025f\u0007\u0006\u0002\u0002\u0255\u0256\f\u0007\u0002",
    "\u0002\u0256\u0257\u0007\t\u0002\u0002\u0257\u0258\u0005l7\u0002\u0258",
    "\u0259\u0007\n\u0002\u0002\u0259\u025f\u0003\u0002\u0002\u0002\u025a",
    "\u025b\f\u0006\u0002\u0002\u025b\u025f\u00074\u0002\u0002\u025c\u025d",
    "\f\u0005\u0002\u0002\u025d\u025f\u00073\u0002\u0002\u025e\u024b\u0003",
    "\u0002\u0002\u0002\u025e\u024f\u0003\u0002\u0002\u0002\u025e\u0255\u0003",
    "\u0002\u0002\u0002\u025e\u025a\u0003\u0002\u0002\u0002\u025e\u025c\u0003",
    "\u0002\u0002\u0002\u025f\u0262\u0003\u0002\u0002\u0002\u0260\u025e\u0003",
    "\u0002\u0002\u0002\u0260\u0261\u0003\u0002\u0002\u0002\u0261k\u0003",
    "\u0002\u0002\u0002\u0262\u0260\u0003\u0002\u0002\u0002\u0263\u0264\b",
    "7\u0001\u0002\u0264\u026d\u0005j6\u0002\u0265\u0266\u0005\u008aF\u0002",
    "\u0266\u0267\u0005l7\u000f\u0267\u026d\u0003\u0002\u0002\u0002\u0268",
    "\u0269\u0007\u0005\u0002\u0002\u0269\u026a\u0005l7\u0002\u026a\u026b",
    "\u0007\u0006\u0002\u0002\u026b\u026d\u0003\u0002\u0002\u0002\u026c\u0263",
    "\u0003\u0002\u0002\u0002\u026c\u0265\u0003\u0002\u0002\u0002\u026c\u0268",
    "\u0003\u0002\u0002\u0002\u026d\u029b\u0003\u0002\u0002\u0002\u026e\u026f",
    "\f\r\u0002\u0002\u026f\u0270\u0005n8\u0002\u0270\u0271\u0005l7\u000e",
    "\u0271\u029a\u0003\u0002\u0002\u0002\u0272\u0273\f\f\u0002\u0002\u0273",
    "\u0274\u0005p9\u0002\u0274\u0275\u0005l7\r\u0275\u029a\u0003\u0002\u0002",
    "\u0002\u0276\u0277\f\u000b\u0002\u0002\u0277\u0278\u0005r:\u0002\u0278",
    "\u0279\u0005l7\f\u0279\u029a\u0003\u0002\u0002\u0002\u027a\u027b\f\n",
    "\u0002\u0002\u027b\u027c\u0005t;\u0002\u027c\u027d\u0005l7\u000b\u027d",
    "\u029a\u0003\u0002\u0002\u0002\u027e\u027f\f\t\u0002\u0002\u027f\u0280",
    "\u0005v<\u0002\u0280\u0281\u0005l7\n\u0281\u029a\u0003\u0002\u0002\u0002",
    "\u0282\u0283\f\b\u0002\u0002\u0283\u0284\u0005x=\u0002\u0284\u0285\u0005",
    "l7\t\u0285\u029a\u0003\u0002\u0002\u0002\u0286\u0287\f\u0007\u0002\u0002",
    "\u0287\u0288\u0005z>\u0002\u0288\u0289\u0005l7\b\u0289\u029a\u0003\u0002",
    "\u0002\u0002\u028a\u028b\f\u0006\u0002\u0002\u028b\u028c\u0005|?\u0002",
    "\u028c\u028d\u0005l7\u0007\u028d\u029a\u0003\u0002\u0002\u0002\u028e",
    "\u028f\f\u0005\u0002\u0002\u028f\u0290\u0005~@\u0002\u0290\u0291\u0005",
    "l7\u0006\u0291\u029a\u0003\u0002\u0002\u0002\u0292\u0293\f\u0004\u0002",
    "\u0002\u0293\u0294\u0005\u0080A\u0002\u0294\u0295\u0005l7\u0005\u0295",
    "\u029a\u0003\u0002\u0002\u0002\u0296\u0297\f\u0003\u0002\u0002\u0297",
    "\u0298\u00076\u0002\u0002\u0298\u029a\u0005\u0088E\u0002\u0299\u026e",
    "\u0003\u0002\u0002\u0002\u0299\u0272\u0003\u0002\u0002\u0002\u0299\u0276",
    "\u0003\u0002\u0002\u0002\u0299\u027a\u0003\u0002\u0002\u0002\u0299\u027e",
    "\u0003\u0002\u0002\u0002\u0299\u0282\u0003\u0002\u0002\u0002\u0299\u0286",
    "\u0003\u0002\u0002\u0002\u0299\u028a\u0003\u0002\u0002\u0002\u0299\u028e",
    "\u0003\u0002\u0002\u0002\u0299\u0292\u0003\u0002\u0002\u0002\u0299\u0296",
    "\u0003\u0002\u0002\u0002\u029a\u029d\u0003\u0002\u0002\u0002\u029b\u0299",
    "\u0003\u0002\u0002\u0002\u029b\u029c\u0003\u0002\u0002\u0002\u029cm",
    "\u0003\u0002\u0002\u0002\u029d\u029b\u0003\u0002\u0002\u0002\u029e\u029f",
    "\t\u0007\u0002\u0002\u029fo\u0003\u0002\u0002\u0002\u02a0\u02a1\t\b",
    "\u0002\u0002\u02a1q\u0003\u0002\u0002\u0002\u02a2\u02a3\t\t\u0002\u0002",
    "\u02a3s\u0003\u0002\u0002\u0002\u02a4\u02a5\t\n\u0002\u0002\u02a5u\u0003",
    "\u0002\u0002\u0002\u02a6\u02a7\t\u000b\u0002\u0002\u02a7w\u0003\u0002",
    "\u0002\u0002\u02a8\u02a9\u0007%\u0002\u0002\u02a9y\u0003\u0002\u0002",
    "\u0002\u02aa\u02ab\u0007\'\u0002\u0002\u02ab{\u0003\u0002\u0002\u0002",
    "\u02ac\u02ad\u0007&\u0002\u0002\u02ad}\u0003\u0002\u0002\u0002\u02ae",
    "\u02af\u0007#\u0002\u0002\u02af\u007f\u0003\u0002\u0002\u0002\u02b0",
    "\u02b1\u0007$\u0002\u0002\u02b1\u0081\u0003\u0002\u0002\u0002\u02b2",
    "\u02b7\u0005l7\u0002\u02b3\u02b4\u0007.\u0002\u0002\u02b4\u02b6\u0005",
    "l7\u0002\u02b5\u02b3\u0003\u0002\u0002\u0002\u02b6\u02b9\u0003\u0002",
    "\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b7\u02b8\u0003\u0002",
    "\u0002\u0002\u02b8\u0083\u0003\u0002\u0002\u0002\u02b9\u02b7\u0003\u0002",
    "\u0002\u0002\u02ba\u02bb\t\f\u0002\u0002\u02bb\u0085\u0003\u0002\u0002",
    "\u0002\u02bc\u02bd\u0007\u0004\u0002\u0002\u02bd\u0087\u0003\u0002\u0002",
    "\u0002\u02be\u02c5\u0007S\u0002\u0002\u02bf\u02c5\u0007T\u0002\u0002",
    "\u02c0\u02c5\u0007U\u0002\u0002\u02c1\u02c5\u0007V\u0002\u0002\u02c2",
    "\u02c5\u0007W\u0002\u0002\u02c3\u02c5\u0005\u008cG\u0002\u02c4\u02be",
    "\u0003\u0002\u0002\u0002\u02c4\u02bf\u0003\u0002\u0002\u0002\u02c4\u02c0",
    "\u0003\u0002\u0002\u0002\u02c4\u02c1\u0003\u0002\u0002\u0002\u02c4\u02c2",
    "\u0003\u0002\u0002\u0002\u02c4\u02c3\u0003\u0002\u0002\u0002\u02c5\u02c7",
    "\u0003\u0002\u0002\u0002\u02c6\u02c8\u0007\"\u0002\u0002\u02c7\u02c6",
    "\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8\u0089",
    "\u0003\u0002\u0002\u0002\u02c9\u02ca\t\r\u0002\u0002\u02ca\u008b\u0003",
    "\u0002\u0002\u0002\u02cb\u02cc\u0007Y\u0002\u0002\u02cc\u008d\u0003",
    "\u0002\u0002\u00029\u0091\u009d\u00a2\u00a7\u00b8\u00bc\u00c1\u00ca",
    "\u00d4\u00df\u00eb\u00f7\u00ff\u0106\u010a\u0111\u0113\u011c\u011e\u0135",
    "\u0140\u0148\u014d\u0169\u016b\u0173\u0176\u017e\u0188\u018b\u0198\u019f",
    "\u01af\u01c3\u01c8\u01e4\u01f0\u01f8\u01fd\u0206\u020f\u021d\u0226\u0230",
    "\u023f\u0249\u0252\u025e\u0260\u026c\u0299\u029b\u02b7\u02c4\u02c7"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, "'('", "')'", "'{'", "'}'", "'['", 
                     "']'", "'='", "'+'", "'-'", "'*'", "'**'", "'/'", "'!'", 
                     "'%'", "'<'", "'>'", "'<='", "'>='", "'!='", "'=='", 
                     "'+='", "'-='", "'*='", "'/='", "'<<='", "'>>='", "'&='", 
                     "'^='", "'|='", "'@'", null, null, "'&'", "'|'", "'^'", 
                     "'<<'", "'>>'", "'..'", "'...'", "'.'", "':'", "','", 
                     "'::'", "'->'", "'\"'", "'?'", "'++'", "'--'", null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, "'=>'" ];

var symbolicNames = [ null, "Libstring", "StringLiteral", "L_PAR", "R_PAR", 
                      "L_BRAC", "R_BRAC", "L_SBRAC", "R_SBRAC", "EQUAL", 
                      "PLUS", "MINUS", "MULT", "POWER", "DIV", "NEGATION", 
                      "MOD", "LESSER_THAN", "GREATER_THAN", "LESSER_EQUAL", 
                      "GREATER_EQUAL", "NOT_EQUAL", "EQUALS_TO", "PLUS_ASSIGN", 
                      "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "LSH_ASSIGN", 
                      "RSH_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", 
                      "ADDROP", "BOOL_AND", "BOOL_OR", "BITWISE_AND", "BITWISE_OR", 
                      "BITWISE_XOR", "BITWISE_LSH", "BITWISE_RSH", "DOUBLE_PERIOD", 
                      "ELLIPSIS", "PERIOD", "COLON", "COMMA", "DOUBLE_COLON", 
                      "ARROW", "DOUBLE_QUOTE", "INTERROGATION", "INCREMENT", 
                      "DECREMENT", "K_GOTO", "K_AS", "K_IMPORT", "K_USING", 
                      "K_SUB", "K_FUNC", "K_RECORD", "K_LOOP", "K_CONST", 
                      "K_VAR", "K_COUNT", "K_FOR", "K_BREAK", "K_CONTINUE", 
                      "K_EACH", "K_OF", "K_IN", "K_WHILE", "K_REPEAT", "K_UNTIL", 
                      "K_VM", "K_CPP", "K_CPP_VAR", "K_IF", "K_ELSE", "K_END", 
                      "K_RETURN", "DOUBLE_ARROW", "K_FALSE", "K_TRUE", "K_BYTE", 
                      "K_INT", "K_LONG", "K_FLOAT", "K_STRING", "LABEL", 
                      "NAME", "INT", "HEX", "BIN", "FLOAT", "COMMENT", "LINE_COMMENT", 
                      "WS" ];

var ruleNames =  [ "program", "block", "import_directive", "use_directive", 
                   "statement", "ext_block", "body", "record_def", "func_def", 
                   "func_stub", "cpp_ext_block", "vm_ext_block", "cpp_func_def", 
                   "cpp_var_def", "vm_func_def", "sub_name", "sub_def", 
                   "sub_stub", "cpp_sub_def", "vm_sub_def", "any_args", 
                   "labelDef", "gotoJump", "breakLoop", "continueLoop", 
                   "retStatement", "par", "parlist", "conditional", "if_elseif", 
                   "if_else", "for_loop", "range_loop", "for_each_loop", 
                   "while_loop", "repeat_loop", "think_loop", "declaration", 
                   "constDecUnit", "constDeclaration", "initializer", "varDecUnit", 
                   "varDeclaration", "arrayInitializer", "arrayDecUnit", 
                   "arrayDeclaration", "assignmentUnit", "assignment", "assignOp", 
                   "unaryOp", "propOp", "primaryExpression", "postfixExpression", 
                   "exp", "multiplicative", "additive", "shift", "relational", 
                   "equality", "bitAnd", "bitXor", "bitOr", "boolAnd", "boolOr", 
                   "expList", "number", "string", "type", "unary", "identifier" ];

function onixParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

onixParser.prototype = Object.create(antlr4.Parser.prototype);
onixParser.prototype.constructor = onixParser;

Object.defineProperty(onixParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

onixParser.EOF = antlr4.Token.EOF;
onixParser.Libstring = 1;
onixParser.StringLiteral = 2;
onixParser.L_PAR = 3;
onixParser.R_PAR = 4;
onixParser.L_BRAC = 5;
onixParser.R_BRAC = 6;
onixParser.L_SBRAC = 7;
onixParser.R_SBRAC = 8;
onixParser.EQUAL = 9;
onixParser.PLUS = 10;
onixParser.MINUS = 11;
onixParser.MULT = 12;
onixParser.POWER = 13;
onixParser.DIV = 14;
onixParser.NEGATION = 15;
onixParser.MOD = 16;
onixParser.LESSER_THAN = 17;
onixParser.GREATER_THAN = 18;
onixParser.LESSER_EQUAL = 19;
onixParser.GREATER_EQUAL = 20;
onixParser.NOT_EQUAL = 21;
onixParser.EQUALS_TO = 22;
onixParser.PLUS_ASSIGN = 23;
onixParser.MINUS_ASSIGN = 24;
onixParser.MULT_ASSIGN = 25;
onixParser.DIV_ASSIGN = 26;
onixParser.LSH_ASSIGN = 27;
onixParser.RSH_ASSIGN = 28;
onixParser.AND_ASSIGN = 29;
onixParser.XOR_ASSIGN = 30;
onixParser.OR_ASSIGN = 31;
onixParser.ADDROP = 32;
onixParser.BOOL_AND = 33;
onixParser.BOOL_OR = 34;
onixParser.BITWISE_AND = 35;
onixParser.BITWISE_OR = 36;
onixParser.BITWISE_XOR = 37;
onixParser.BITWISE_LSH = 38;
onixParser.BITWISE_RSH = 39;
onixParser.DOUBLE_PERIOD = 40;
onixParser.ELLIPSIS = 41;
onixParser.PERIOD = 42;
onixParser.COLON = 43;
onixParser.COMMA = 44;
onixParser.DOUBLE_COLON = 45;
onixParser.ARROW = 46;
onixParser.DOUBLE_QUOTE = 47;
onixParser.INTERROGATION = 48;
onixParser.INCREMENT = 49;
onixParser.DECREMENT = 50;
onixParser.K_GOTO = 51;
onixParser.K_AS = 52;
onixParser.K_IMPORT = 53;
onixParser.K_USING = 54;
onixParser.K_SUB = 55;
onixParser.K_FUNC = 56;
onixParser.K_RECORD = 57;
onixParser.K_LOOP = 58;
onixParser.K_CONST = 59;
onixParser.K_VAR = 60;
onixParser.K_COUNT = 61;
onixParser.K_FOR = 62;
onixParser.K_BREAK = 63;
onixParser.K_CONTINUE = 64;
onixParser.K_EACH = 65;
onixParser.K_OF = 66;
onixParser.K_IN = 67;
onixParser.K_WHILE = 68;
onixParser.K_REPEAT = 69;
onixParser.K_UNTIL = 70;
onixParser.K_VM = 71;
onixParser.K_CPP = 72;
onixParser.K_CPP_VAR = 73;
onixParser.K_IF = 74;
onixParser.K_ELSE = 75;
onixParser.K_END = 76;
onixParser.K_RETURN = 77;
onixParser.DOUBLE_ARROW = 78;
onixParser.K_FALSE = 79;
onixParser.K_TRUE = 80;
onixParser.K_BYTE = 81;
onixParser.K_INT = 82;
onixParser.K_LONG = 83;
onixParser.K_FLOAT = 84;
onixParser.K_STRING = 85;
onixParser.LABEL = 86;
onixParser.NAME = 87;
onixParser.INT = 88;
onixParser.HEX = 89;
onixParser.BIN = 90;
onixParser.FLOAT = 91;
onixParser.COMMENT = 92;
onixParser.LINE_COMMENT = 93;
onixParser.WS = 94;

onixParser.RULE_program = 0;
onixParser.RULE_block = 1;
onixParser.RULE_import_directive = 2;
onixParser.RULE_use_directive = 3;
onixParser.RULE_statement = 4;
onixParser.RULE_ext_block = 5;
onixParser.RULE_body = 6;
onixParser.RULE_record_def = 7;
onixParser.RULE_func_def = 8;
onixParser.RULE_func_stub = 9;
onixParser.RULE_cpp_ext_block = 10;
onixParser.RULE_vm_ext_block = 11;
onixParser.RULE_cpp_func_def = 12;
onixParser.RULE_cpp_var_def = 13;
onixParser.RULE_vm_func_def = 14;
onixParser.RULE_sub_name = 15;
onixParser.RULE_sub_def = 16;
onixParser.RULE_sub_stub = 17;
onixParser.RULE_cpp_sub_def = 18;
onixParser.RULE_vm_sub_def = 19;
onixParser.RULE_any_args = 20;
onixParser.RULE_labelDef = 21;
onixParser.RULE_gotoJump = 22;
onixParser.RULE_breakLoop = 23;
onixParser.RULE_continueLoop = 24;
onixParser.RULE_retStatement = 25;
onixParser.RULE_par = 26;
onixParser.RULE_parlist = 27;
onixParser.RULE_conditional = 28;
onixParser.RULE_if_elseif = 29;
onixParser.RULE_if_else = 30;
onixParser.RULE_for_loop = 31;
onixParser.RULE_range_loop = 32;
onixParser.RULE_for_each_loop = 33;
onixParser.RULE_while_loop = 34;
onixParser.RULE_repeat_loop = 35;
onixParser.RULE_think_loop = 36;
onixParser.RULE_declaration = 37;
onixParser.RULE_constDecUnit = 38;
onixParser.RULE_constDeclaration = 39;
onixParser.RULE_initializer = 40;
onixParser.RULE_varDecUnit = 41;
onixParser.RULE_varDeclaration = 42;
onixParser.RULE_arrayInitializer = 43;
onixParser.RULE_arrayDecUnit = 44;
onixParser.RULE_arrayDeclaration = 45;
onixParser.RULE_assignmentUnit = 46;
onixParser.RULE_assignment = 47;
onixParser.RULE_assignOp = 48;
onixParser.RULE_unaryOp = 49;
onixParser.RULE_propOp = 50;
onixParser.RULE_primaryExpression = 51;
onixParser.RULE_postfixExpression = 52;
onixParser.RULE_exp = 53;
onixParser.RULE_multiplicative = 54;
onixParser.RULE_additive = 55;
onixParser.RULE_shift = 56;
onixParser.RULE_relational = 57;
onixParser.RULE_equality = 58;
onixParser.RULE_bitAnd = 59;
onixParser.RULE_bitXor = 60;
onixParser.RULE_bitOr = 61;
onixParser.RULE_boolAnd = 62;
onixParser.RULE_boolOr = 63;
onixParser.RULE_expList = 64;
onixParser.RULE_number = 65;
onixParser.RULE_string = 66;
onixParser.RULE_type = 67;
onixParser.RULE_unary = 68;
onixParser.RULE_identifier = 69;


function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.EOF = function() {
    return this.getToken(onixParser.EOF, 0);
};

ProgramContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

ProgramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitProgram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ProgramContext = ProgramContext;

onixParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, onixParser.RULE_program);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 143;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 140;
                this.block(); 
            }
            this.state = 145;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
        }

        this.state = 146;
        this.match(onixParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.import_directive = function() {
    return this.getTypedRuleContext(Import_directiveContext,0);
};

BlockContext.prototype.use_directive = function() {
    return this.getTypedRuleContext(Use_directiveContext,0);
};

BlockContext.prototype.sub_def = function() {
    return this.getTypedRuleContext(Sub_defContext,0);
};

BlockContext.prototype.func_def = function() {
    return this.getTypedRuleContext(Func_defContext,0);
};

BlockContext.prototype.record_def = function() {
    return this.getTypedRuleContext(Record_defContext,0);
};

BlockContext.prototype.ext_block = function() {
    return this.getTypedRuleContext(Ext_blockContext,0);
};

BlockContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.BlockContext = BlockContext;

onixParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, onixParser.RULE_block);
    try {
        this.state = 155;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case onixParser.K_IMPORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 148;
            this.import_directive();
            break;
        case onixParser.K_USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 149;
            this.use_directive();
            break;
        case onixParser.K_SUB:
            this.enterOuterAlt(localctx, 3);
            this.state = 150;
            this.sub_def();
            break;
        case onixParser.K_FUNC:
            this.enterOuterAlt(localctx, 4);
            this.state = 151;
            this.func_def();
            break;
        case onixParser.K_RECORD:
            this.enterOuterAlt(localctx, 5);
            this.state = 152;
            this.record_def();
            break;
        case onixParser.K_VM:
        case onixParser.K_CPP:
            this.enterOuterAlt(localctx, 6);
            this.state = 153;
            this.ext_block();
            break;
        case onixParser.StringLiteral:
        case onixParser.L_BRAC:
        case onixParser.ADDROP:
        case onixParser.K_GOTO:
        case onixParser.K_LOOP:
        case onixParser.K_CONST:
        case onixParser.K_VAR:
        case onixParser.K_COUNT:
        case onixParser.K_FOR:
        case onixParser.K_BREAK:
        case onixParser.K_CONTINUE:
        case onixParser.K_WHILE:
        case onixParser.K_REPEAT:
        case onixParser.K_IF:
        case onixParser.K_RETURN:
        case onixParser.K_FALSE:
        case onixParser.K_TRUE:
        case onixParser.LABEL:
        case onixParser.NAME:
        case onixParser.INT:
        case onixParser.HEX:
        case onixParser.BIN:
        case onixParser.FLOAT:
            this.enterOuterAlt(localctx, 7);
            this.state = 154;
            this.statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Import_directiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_import_directive;
    return this;
}

Import_directiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_directiveContext.prototype.constructor = Import_directiveContext;

Import_directiveContext.prototype.K_IMPORT = function() {
    return this.getToken(onixParser.K_IMPORT, 0);
};

Import_directiveContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

Import_directiveContext.prototype.Libstring = function() {
    return this.getToken(onixParser.Libstring, 0);
};

Import_directiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitImport_directive(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Import_directiveContext = Import_directiveContext;

onixParser.prototype.import_directive = function() {

    var localctx = new Import_directiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, onixParser.RULE_import_directive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 157;
        this.match(onixParser.K_IMPORT);
        this.state = 160;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case onixParser.StringLiteral:
            this.state = 158;
            this.string();
            break;
        case onixParser.Libstring:
            this.state = 159;
            this.match(onixParser.Libstring);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Use_directiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_use_directive;
    return this;
}

Use_directiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Use_directiveContext.prototype.constructor = Use_directiveContext;

Use_directiveContext.prototype.K_USING = function() {
    return this.getToken(onixParser.K_USING, 0);
};

Use_directiveContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

Use_directiveContext.prototype.Libstring = function() {
    return this.getToken(onixParser.Libstring, 0);
};

Use_directiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitUse_directive(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Use_directiveContext = Use_directiveContext;

onixParser.prototype.use_directive = function() {

    var localctx = new Use_directiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, onixParser.RULE_use_directive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 162;
        this.match(onixParser.K_USING);
        this.state = 165;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case onixParser.StringLiteral:
            this.state = 163;
            this.string();
            break;
        case onixParser.Libstring:
            this.state = 164;
            this.match(onixParser.Libstring);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

StatementContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

StatementContext.prototype.conditional = function() {
    return this.getTypedRuleContext(ConditionalContext,0);
};

StatementContext.prototype.for_loop = function() {
    return this.getTypedRuleContext(For_loopContext,0);
};

StatementContext.prototype.while_loop = function() {
    return this.getTypedRuleContext(While_loopContext,0);
};

StatementContext.prototype.repeat_loop = function() {
    return this.getTypedRuleContext(Repeat_loopContext,0);
};

StatementContext.prototype.for_each_loop = function() {
    return this.getTypedRuleContext(For_each_loopContext,0);
};

StatementContext.prototype.think_loop = function() {
    return this.getTypedRuleContext(Think_loopContext,0);
};

StatementContext.prototype.range_loop = function() {
    return this.getTypedRuleContext(Range_loopContext,0);
};

StatementContext.prototype.labelDef = function() {
    return this.getTypedRuleContext(LabelDefContext,0);
};

StatementContext.prototype.gotoJump = function() {
    return this.getTypedRuleContext(GotoJumpContext,0);
};

StatementContext.prototype.breakLoop = function() {
    return this.getTypedRuleContext(BreakLoopContext,0);
};

StatementContext.prototype.continueLoop = function() {
    return this.getTypedRuleContext(ContinueLoopContext,0);
};

StatementContext.prototype.retStatement = function() {
    return this.getTypedRuleContext(RetStatementContext,0);
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.StatementContext = StatementContext;

onixParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, onixParser.RULE_statement);
    try {
        this.state = 182;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 167;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 168;
            this.assignment();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 169;
            this.postfixExpression(0);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 170;
            this.conditional();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 171;
            this.for_loop();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 172;
            this.while_loop();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 173;
            this.repeat_loop();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 174;
            this.for_each_loop();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 175;
            this.think_loop();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 176;
            this.range_loop();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 177;
            this.labelDef();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 178;
            this.gotoJump();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 179;
            this.breakLoop();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 180;
            this.continueLoop();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 181;
            this.retStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ext_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_ext_block;
    return this;
}

Ext_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ext_blockContext.prototype.constructor = Ext_blockContext;

Ext_blockContext.prototype.cpp_ext_block = function() {
    return this.getTypedRuleContext(Cpp_ext_blockContext,0);
};

Ext_blockContext.prototype.vm_ext_block = function() {
    return this.getTypedRuleContext(Vm_ext_blockContext,0);
};

Ext_blockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitExt_block(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Ext_blockContext = Ext_blockContext;

onixParser.prototype.ext_block = function() {

    var localctx = new Ext_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, onixParser.RULE_ext_block);
    try {
        this.state = 186;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case onixParser.K_CPP:
            this.enterOuterAlt(localctx, 1);
            this.state = 184;
            this.cpp_ext_block();
            break;
        case onixParser.K_VM:
            this.enterOuterAlt(localctx, 2);
            this.state = 185;
            this.vm_ext_block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_body;
    return this;
}

BodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BodyContext.prototype.constructor = BodyContext;

BodyContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.BodyContext = BodyContext;

onixParser.prototype.body = function() {

    var localctx = new BodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, onixParser.RULE_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 191;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===onixParser.StringLiteral || _la===onixParser.L_BRAC || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (onixParser.ADDROP - 32)) | (1 << (onixParser.K_GOTO - 32)) | (1 << (onixParser.K_LOOP - 32)) | (1 << (onixParser.K_CONST - 32)) | (1 << (onixParser.K_VAR - 32)) | (1 << (onixParser.K_COUNT - 32)) | (1 << (onixParser.K_FOR - 32)) | (1 << (onixParser.K_BREAK - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (onixParser.K_CONTINUE - 64)) | (1 << (onixParser.K_WHILE - 64)) | (1 << (onixParser.K_REPEAT - 64)) | (1 << (onixParser.K_IF - 64)) | (1 << (onixParser.K_RETURN - 64)) | (1 << (onixParser.K_FALSE - 64)) | (1 << (onixParser.K_TRUE - 64)) | (1 << (onixParser.LABEL - 64)) | (1 << (onixParser.NAME - 64)) | (1 << (onixParser.INT - 64)) | (1 << (onixParser.HEX - 64)) | (1 << (onixParser.BIN - 64)) | (1 << (onixParser.FLOAT - 64)))) !== 0)) {
            this.state = 188;
            this.statement();
            this.state = 193;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Record_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_record_def;
    return this;
}

Record_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_defContext.prototype.constructor = Record_defContext;

Record_defContext.prototype.K_RECORD = function() {
    return this.getToken(onixParser.K_RECORD, 0);
};

Record_defContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Record_defContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Record_defContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

Record_defContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

Record_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitRecord_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Record_defContext = Record_defContext;

onixParser.prototype.record_def = function() {

    var localctx = new Record_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, onixParser.RULE_record_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 194;
        this.match(onixParser.K_RECORD);
        this.state = 195;
        this.identifier();
        this.state = 196;
        this.match(onixParser.COLON);
        this.state = 200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===onixParser.K_CONST || _la===onixParser.K_VAR) {
            this.state = 197;
            this.declaration();
            this.state = 202;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 203;
        this.match(onixParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Func_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_func_def;
    return this;
}

Func_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_defContext.prototype.constructor = Func_defContext;

Func_defContext.prototype.K_FUNC = function() {
    return this.getToken(onixParser.K_FUNC, 0);
};

Func_defContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

Func_defContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Func_defContext.prototype.DOUBLE_ARROW = function() {
    return this.getToken(onixParser.DOUBLE_ARROW, 0);
};

Func_defContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

Func_defContext.prototype.PERIOD = function() {
    return this.getToken(onixParser.PERIOD, 0);
};

Func_defContext.prototype.parlist = function() {
    return this.getTypedRuleContext(ParlistContext,0);
};

Func_defContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Func_defContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Func_defContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

Func_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitFunc_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Func_defContext = Func_defContext;

onixParser.prototype.func_def = function() {

    var localctx = new Func_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, onixParser.RULE_func_def);
    try {
        this.state = 253;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 205;
            this.match(onixParser.K_FUNC);
            this.state = 206;
            this.type();
            this.state = 210;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
            if(la_===1) {
                this.state = 207;
                this.type();
                this.state = 208;
                this.match(onixParser.PERIOD);

            }
            this.state = 212;
            this.identifier();
            this.state = 213;
            this.match(onixParser.DOUBLE_ARROW);
            this.state = 214;
            this.exp(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 216;
            this.match(onixParser.K_FUNC);
            this.state = 217;
            this.type();
            this.state = 221;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
            if(la_===1) {
                this.state = 218;
                this.type();
                this.state = 219;
                this.match(onixParser.PERIOD);

            }
            this.state = 223;
            this.identifier();
            this.state = 224;
            this.parlist();
            this.state = 225;
            this.match(onixParser.DOUBLE_ARROW);
            this.state = 226;
            this.exp(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 228;
            this.match(onixParser.K_FUNC);
            this.state = 229;
            this.type();
            this.state = 233;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
            if(la_===1) {
                this.state = 230;
                this.type();
                this.state = 231;
                this.match(onixParser.PERIOD);

            }
            this.state = 235;
            this.identifier();
            this.state = 236;
            this.match(onixParser.COLON);
            this.state = 237;
            this.body();
            this.state = 238;
            this.match(onixParser.K_END);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 240;
            this.match(onixParser.K_FUNC);
            this.state = 241;
            this.type();
            this.state = 245;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
            if(la_===1) {
                this.state = 242;
                this.type();
                this.state = 243;
                this.match(onixParser.PERIOD);

            }
            this.state = 247;
            this.identifier();
            this.state = 248;
            this.parlist();
            this.state = 249;
            this.match(onixParser.COLON);
            this.state = 250;
            this.body();
            this.state = 251;
            this.match(onixParser.K_END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Func_stubContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_func_stub;
    return this;
}

Func_stubContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_stubContext.prototype.constructor = Func_stubContext;

Func_stubContext.prototype.K_FUNC = function() {
    return this.getToken(onixParser.K_FUNC, 0);
};

Func_stubContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

Func_stubContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Func_stubContext.prototype.PERIOD = function() {
    return this.getToken(onixParser.PERIOD, 0);
};

Func_stubContext.prototype.parlist = function() {
    return this.getTypedRuleContext(ParlistContext,0);
};

Func_stubContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitFunc_stub(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Func_stubContext = Func_stubContext;

onixParser.prototype.func_stub = function() {

    var localctx = new Func_stubContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, onixParser.RULE_func_stub);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 255;
        this.match(onixParser.K_FUNC);
        this.state = 256;
        this.type();
        this.state = 260;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        if(la_===1) {
            this.state = 257;
            this.type();
            this.state = 258;
            this.match(onixParser.PERIOD);

        }
        this.state = 262;
        this.identifier();
        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===onixParser.L_PAR || _la===onixParser.ELLIPSIS || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (onixParser.K_BYTE - 81)) | (1 << (onixParser.K_INT - 81)) | (1 << (onixParser.K_LONG - 81)) | (1 << (onixParser.K_FLOAT - 81)) | (1 << (onixParser.K_STRING - 81)) | (1 << (onixParser.NAME - 81)))) !== 0)) {
            this.state = 263;
            this.parlist();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Cpp_ext_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_cpp_ext_block;
    return this;
}

Cpp_ext_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cpp_ext_blockContext.prototype.constructor = Cpp_ext_blockContext;

Cpp_ext_blockContext.prototype.K_CPP = function() {
    return this.getToken(onixParser.K_CPP, 0);
};

Cpp_ext_blockContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Cpp_ext_blockContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

Cpp_ext_blockContext.prototype.cpp_func_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cpp_func_defContext);
    } else {
        return this.getTypedRuleContext(Cpp_func_defContext,i);
    }
};

Cpp_ext_blockContext.prototype.cpp_sub_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cpp_sub_defContext);
    } else {
        return this.getTypedRuleContext(Cpp_sub_defContext,i);
    }
};

Cpp_ext_blockContext.prototype.cpp_var_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cpp_var_defContext);
    } else {
        return this.getTypedRuleContext(Cpp_var_defContext,i);
    }
};

Cpp_ext_blockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitCpp_ext_block(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Cpp_ext_blockContext = Cpp_ext_blockContext;

onixParser.prototype.cpp_ext_block = function() {

    var localctx = new Cpp_ext_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, onixParser.RULE_cpp_ext_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 266;
        this.match(onixParser.K_CPP);
        this.state = 267;
        this.match(onixParser.COLON);
        this.state = 273;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===onixParser.StringLiteral) {
            this.state = 271;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            switch(la_) {
            case 1:
                this.state = 268;
                this.cpp_func_def();
                break;

            case 2:
                this.state = 269;
                this.cpp_sub_def();
                break;

            case 3:
                this.state = 270;
                this.cpp_var_def();
                break;

            }
            this.state = 275;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 276;
        this.match(onixParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Vm_ext_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_vm_ext_block;
    return this;
}

Vm_ext_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Vm_ext_blockContext.prototype.constructor = Vm_ext_blockContext;

Vm_ext_blockContext.prototype.K_VM = function() {
    return this.getToken(onixParser.K_VM, 0);
};

Vm_ext_blockContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Vm_ext_blockContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

Vm_ext_blockContext.prototype.vm_func_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Vm_func_defContext);
    } else {
        return this.getTypedRuleContext(Vm_func_defContext,i);
    }
};

Vm_ext_blockContext.prototype.vm_sub_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Vm_sub_defContext);
    } else {
        return this.getTypedRuleContext(Vm_sub_defContext,i);
    }
};

Vm_ext_blockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitVm_ext_block(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Vm_ext_blockContext = Vm_ext_blockContext;

onixParser.prototype.vm_ext_block = function() {

    var localctx = new Vm_ext_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, onixParser.RULE_vm_ext_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        this.match(onixParser.K_VM);
        this.state = 279;
        this.match(onixParser.COLON);
        this.state = 284;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (onixParser.K_FALSE - 79)) | (1 << (onixParser.K_TRUE - 79)) | (1 << (onixParser.INT - 79)) | (1 << (onixParser.HEX - 79)) | (1 << (onixParser.BIN - 79)) | (1 << (onixParser.FLOAT - 79)))) !== 0)) {
            this.state = 282;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            switch(la_) {
            case 1:
                this.state = 280;
                this.vm_func_def();
                break;

            case 2:
                this.state = 281;
                this.vm_sub_def();
                break;

            }
            this.state = 286;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 287;
        this.match(onixParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Cpp_func_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_cpp_func_def;
    this.sub = null; // StringContext
    return this;
}

Cpp_func_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cpp_func_defContext.prototype.constructor = Cpp_func_defContext;

Cpp_func_defContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Cpp_func_defContext.prototype.func_stub = function() {
    return this.getTypedRuleContext(Func_stubContext,0);
};

Cpp_func_defContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

Cpp_func_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitCpp_func_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Cpp_func_defContext = Cpp_func_defContext;

onixParser.prototype.cpp_func_def = function() {

    var localctx = new Cpp_func_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, onixParser.RULE_cpp_func_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 289;
        localctx.sub = this.string();
        this.state = 290;
        this.match(onixParser.COLON);
        this.state = 291;
        this.func_stub();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Cpp_var_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_cpp_var_def;
    this.sub = null; // StringContext
    return this;
}

Cpp_var_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cpp_var_defContext.prototype.constructor = Cpp_var_defContext;

Cpp_var_defContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Cpp_var_defContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

Cpp_var_defContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

Cpp_var_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitCpp_var_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Cpp_var_defContext = Cpp_var_defContext;

onixParser.prototype.cpp_var_def = function() {

    var localctx = new Cpp_var_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, onixParser.RULE_cpp_var_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 293;
        localctx.sub = this.string();
        this.state = 294;
        this.match(onixParser.COLON);
        this.state = 295;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Vm_func_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_vm_func_def;
    this.id = null; // NumberContext
    return this;
}

Vm_func_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Vm_func_defContext.prototype.constructor = Vm_func_defContext;

Vm_func_defContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Vm_func_defContext.prototype.func_stub = function() {
    return this.getTypedRuleContext(Func_stubContext,0);
};

Vm_func_defContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

Vm_func_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitVm_func_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Vm_func_defContext = Vm_func_defContext;

onixParser.prototype.vm_func_def = function() {

    var localctx = new Vm_func_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, onixParser.RULE_vm_func_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 297;
        localctx.id = this.number();
        this.state = 298;
        this.match(onixParser.COLON);
        this.state = 299;
        this.func_stub();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sub_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_sub_name;
    return this;
}

Sub_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sub_nameContext.prototype.constructor = Sub_nameContext;

Sub_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Sub_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitSub_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Sub_nameContext = Sub_nameContext;

onixParser.prototype.sub_name = function() {

    var localctx = new Sub_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, onixParser.RULE_sub_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sub_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_sub_def;
    return this;
}

Sub_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sub_defContext.prototype.constructor = Sub_defContext;

Sub_defContext.prototype.K_SUB = function() {
    return this.getToken(onixParser.K_SUB, 0);
};

Sub_defContext.prototype.sub_name = function() {
    return this.getTypedRuleContext(Sub_nameContext,0);
};

Sub_defContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Sub_defContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Sub_defContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

Sub_defContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Sub_defContext.prototype.PERIOD = function() {
    return this.getToken(onixParser.PERIOD, 0);
};

Sub_defContext.prototype.parlist = function() {
    return this.getTypedRuleContext(ParlistContext,0);
};

Sub_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitSub_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Sub_defContext = Sub_defContext;

onixParser.prototype.sub_def = function() {

    var localctx = new Sub_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, onixParser.RULE_sub_def);
    try {
        this.state = 326;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 303;
            this.match(onixParser.K_SUB);
            this.state = 307;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
            if(la_===1) {
                this.state = 304;
                this.type();
                this.state = 305;
                this.match(onixParser.PERIOD);

            }
            this.state = 309;
            this.sub_name();
            this.state = 310;
            this.match(onixParser.COLON);
            this.state = 311;
            this.body();
            this.state = 312;
            this.match(onixParser.K_END);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 314;
            this.match(onixParser.K_SUB);
            this.state = 318;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
            if(la_===1) {
                this.state = 315;
                this.type();
                this.state = 316;
                this.match(onixParser.PERIOD);

            }
            this.state = 320;
            this.sub_name();
            this.state = 321;
            this.parlist();
            this.state = 322;
            this.match(onixParser.COLON);
            this.state = 323;
            this.body();
            this.state = 324;
            this.match(onixParser.K_END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sub_stubContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_sub_stub;
    return this;
}

Sub_stubContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sub_stubContext.prototype.constructor = Sub_stubContext;

Sub_stubContext.prototype.K_SUB = function() {
    return this.getToken(onixParser.K_SUB, 0);
};

Sub_stubContext.prototype.sub_name = function() {
    return this.getTypedRuleContext(Sub_nameContext,0);
};

Sub_stubContext.prototype.parlist = function() {
    return this.getTypedRuleContext(ParlistContext,0);
};

Sub_stubContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitSub_stub(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Sub_stubContext = Sub_stubContext;

onixParser.prototype.sub_stub = function() {

    var localctx = new Sub_stubContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, onixParser.RULE_sub_stub);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 328;
        this.match(onixParser.K_SUB);
        this.state = 329;
        this.sub_name();
        this.state = 331;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===onixParser.L_PAR || _la===onixParser.ELLIPSIS || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (onixParser.K_BYTE - 81)) | (1 << (onixParser.K_INT - 81)) | (1 << (onixParser.K_LONG - 81)) | (1 << (onixParser.K_FLOAT - 81)) | (1 << (onixParser.K_STRING - 81)) | (1 << (onixParser.NAME - 81)))) !== 0)) {
            this.state = 330;
            this.parlist();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Cpp_sub_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_cpp_sub_def;
    this.sub = null; // StringContext
    return this;
}

Cpp_sub_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cpp_sub_defContext.prototype.constructor = Cpp_sub_defContext;

Cpp_sub_defContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Cpp_sub_defContext.prototype.sub_stub = function() {
    return this.getTypedRuleContext(Sub_stubContext,0);
};

Cpp_sub_defContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

Cpp_sub_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitCpp_sub_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Cpp_sub_defContext = Cpp_sub_defContext;

onixParser.prototype.cpp_sub_def = function() {

    var localctx = new Cpp_sub_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, onixParser.RULE_cpp_sub_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        localctx.sub = this.string();
        this.state = 334;
        this.match(onixParser.COLON);
        this.state = 335;
        this.sub_stub();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Vm_sub_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_vm_sub_def;
    this.id = null; // NumberContext
    return this;
}

Vm_sub_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Vm_sub_defContext.prototype.constructor = Vm_sub_defContext;

Vm_sub_defContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Vm_sub_defContext.prototype.sub_stub = function() {
    return this.getTypedRuleContext(Sub_stubContext,0);
};

Vm_sub_defContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

Vm_sub_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitVm_sub_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Vm_sub_defContext = Vm_sub_defContext;

onixParser.prototype.vm_sub_def = function() {

    var localctx = new Vm_sub_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, onixParser.RULE_vm_sub_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        localctx.id = this.number();
        this.state = 338;
        this.match(onixParser.COLON);
        this.state = 339;
        this.sub_stub();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Any_argsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_any_args;
    return this;
}

Any_argsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_argsContext.prototype.constructor = Any_argsContext;

Any_argsContext.prototype.ELLIPSIS = function() {
    return this.getToken(onixParser.ELLIPSIS, 0);
};

Any_argsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitAny_args(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Any_argsContext = Any_argsContext;

onixParser.prototype.any_args = function() {

    var localctx = new Any_argsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, onixParser.RULE_any_args);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 341;
        this.match(onixParser.ELLIPSIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_labelDef;
    return this;
}

LabelDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelDefContext.prototype.constructor = LabelDefContext;

LabelDefContext.prototype.LABEL = function() {
    return this.getToken(onixParser.LABEL, 0);
};

LabelDefContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

LabelDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitLabelDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.LabelDefContext = LabelDefContext;

onixParser.prototype.labelDef = function() {

    var localctx = new LabelDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, onixParser.RULE_labelDef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(onixParser.LABEL);
        this.state = 344;
        this.match(onixParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GotoJumpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_gotoJump;
    return this;
}

GotoJumpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GotoJumpContext.prototype.constructor = GotoJumpContext;

GotoJumpContext.prototype.K_GOTO = function() {
    return this.getToken(onixParser.K_GOTO, 0);
};

GotoJumpContext.prototype.LABEL = function() {
    return this.getToken(onixParser.LABEL, 0);
};

GotoJumpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitGotoJump(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.GotoJumpContext = GotoJumpContext;

onixParser.prototype.gotoJump = function() {

    var localctx = new GotoJumpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, onixParser.RULE_gotoJump);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 346;
        this.match(onixParser.K_GOTO);
        this.state = 347;
        this.match(onixParser.LABEL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BreakLoopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_breakLoop;
    return this;
}

BreakLoopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakLoopContext.prototype.constructor = BreakLoopContext;

BreakLoopContext.prototype.K_BREAK = function() {
    return this.getToken(onixParser.K_BREAK, 0);
};

BreakLoopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitBreakLoop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.BreakLoopContext = BreakLoopContext;

onixParser.prototype.breakLoop = function() {

    var localctx = new BreakLoopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, onixParser.RULE_breakLoop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.match(onixParser.K_BREAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContinueLoopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_continueLoop;
    return this;
}

ContinueLoopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueLoopContext.prototype.constructor = ContinueLoopContext;

ContinueLoopContext.prototype.K_CONTINUE = function() {
    return this.getToken(onixParser.K_CONTINUE, 0);
};

ContinueLoopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitContinueLoop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ContinueLoopContext = ContinueLoopContext;

onixParser.prototype.continueLoop = function() {

    var localctx = new ContinueLoopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, onixParser.RULE_continueLoop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this.match(onixParser.K_CONTINUE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RetStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_retStatement;
    return this;
}

RetStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RetStatementContext.prototype.constructor = RetStatementContext;

RetStatementContext.prototype.K_RETURN = function() {
    return this.getToken(onixParser.K_RETURN, 0);
};

RetStatementContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

RetStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitRetStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.RetStatementContext = RetStatementContext;

onixParser.prototype.retStatement = function() {

    var localctx = new RetStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, onixParser.RULE_retStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 353;
        this.match(onixParser.K_RETURN);
        this.state = 354;
        this.exp(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_par;
    return this;
}

ParContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParContext.prototype.constructor = ParContext;

ParContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ParContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ParContext.prototype.L_SBRAC = function() {
    return this.getToken(onixParser.L_SBRAC, 0);
};

ParContext.prototype.R_SBRAC = function() {
    return this.getToken(onixParser.R_SBRAC, 0);
};

ParContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

ParContext.prototype.any_args = function() {
    return this.getTypedRuleContext(Any_argsContext,0);
};

ParContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitPar(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ParContext = ParContext;

onixParser.prototype.par = function() {

    var localctx = new ParContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, onixParser.RULE_par);
    var _la = 0; // Token type
    try {
        this.state = 372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 361;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
            if(la_===1) {
                this.state = 356;
                this.type();
                this.state = 359;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===onixParser.L_SBRAC) {
                    this.state = 357;
                    this.match(onixParser.L_SBRAC);
                    this.state = 358;
                    this.match(onixParser.R_SBRAC);
                }


            }
            this.state = 363;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 364;
            this.identifier();
            this.state = 365;
            this.match(onixParser.COLON);
            this.state = 366;
            this.type();
            this.state = 369;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===onixParser.L_SBRAC) {
                this.state = 367;
                this.match(onixParser.L_SBRAC);
                this.state = 368;
                this.match(onixParser.R_SBRAC);
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 371;
            this.any_args();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_parlist;
    return this;
}

ParlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParlistContext.prototype.constructor = ParlistContext;

ParlistContext.prototype.L_PAR = function() {
    return this.getToken(onixParser.L_PAR, 0);
};

ParlistContext.prototype.par = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParContext);
    } else {
        return this.getTypedRuleContext(ParContext,i);
    }
};

ParlistContext.prototype.R_PAR = function() {
    return this.getToken(onixParser.R_PAR, 0);
};

ParlistContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(onixParser.COMMA);
    } else {
        return this.getToken(onixParser.COMMA, i);
    }
};


ParlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitParlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ParlistContext = ParlistContext;

onixParser.prototype.parlist = function() {

    var localctx = new ParlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, onixParser.RULE_parlist);
    var _la = 0; // Token type
    try {
        this.state = 393;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case onixParser.L_PAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 374;
            this.match(onixParser.L_PAR);
            this.state = 375;
            this.par();
            this.state = 380;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===onixParser.COMMA) {
                this.state = 376;
                this.match(onixParser.COMMA);
                this.state = 377;
                this.par();
                this.state = 382;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 383;
            this.match(onixParser.R_PAR);
            break;
        case onixParser.ELLIPSIS:
        case onixParser.K_BYTE:
        case onixParser.K_INT:
        case onixParser.K_LONG:
        case onixParser.K_FLOAT:
        case onixParser.K_STRING:
        case onixParser.NAME:
            this.enterOuterAlt(localctx, 2);
            this.state = 385;
            this.par();
            this.state = 390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===onixParser.COMMA) {
                this.state = 386;
                this.match(onixParser.COMMA);
                this.state = 387;
                this.par();
                this.state = 392;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_conditional;
    return this;
}

ConditionalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalContext.prototype.constructor = ConditionalContext;

ConditionalContext.prototype.K_IF = function() {
    return this.getToken(onixParser.K_IF, 0);
};

ConditionalContext.prototype.exp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpContext);
    } else {
        return this.getTypedRuleContext(ExpContext,i);
    }
};

ConditionalContext.prototype.body = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BodyContext);
    } else {
        return this.getTypedRuleContext(BodyContext,i);
    }
};

ConditionalContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

ConditionalContext.prototype.INTERROGATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(onixParser.INTERROGATION);
    } else {
        return this.getToken(onixParser.INTERROGATION, i);
    }
};


ConditionalContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(onixParser.COLON);
    } else {
        return this.getToken(onixParser.COLON, i);
    }
};


ConditionalContext.prototype.if_elseif = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(If_elseifContext);
    } else {
        return this.getTypedRuleContext(If_elseifContext,i);
    }
};

ConditionalContext.prototype.if_else = function() {
    return this.getTypedRuleContext(If_elseContext,0);
};

ConditionalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitConditional(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ConditionalContext = ConditionalContext;

onixParser.prototype.conditional = function() {

    var localctx = new ConditionalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, onixParser.RULE_conditional);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 395;
        this.match(onixParser.K_IF);
        this.state = 396;
        this.exp(0);
        this.state = 397;
        _la = this._input.LA(1);
        if(!(_la===onixParser.COLON || _la===onixParser.INTERROGATION)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 398;
        this.body();
        this.state = 406;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 399;
                this.if_elseif();
                this.state = 400;
                this.exp(0);
                this.state = 401;
                _la = this._input.LA(1);
                if(!(_la===onixParser.COLON || _la===onixParser.INTERROGATION)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 402;
                this.body(); 
            }
            this.state = 408;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
        }

        this.state = 413;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===onixParser.K_ELSE) {
            this.state = 409;
            this.if_else();
            this.state = 410;
            _la = this._input.LA(1);
            if(!(_la===onixParser.COLON || _la===onixParser.INTERROGATION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 411;
            this.body();
        }

        this.state = 415;
        this.match(onixParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function If_elseifContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_if_elseif;
    return this;
}

If_elseifContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_elseifContext.prototype.constructor = If_elseifContext;

If_elseifContext.prototype.K_ELSE = function() {
    return this.getToken(onixParser.K_ELSE, 0);
};

If_elseifContext.prototype.K_IF = function() {
    return this.getToken(onixParser.K_IF, 0);
};

If_elseifContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitIf_elseif(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.If_elseifContext = If_elseifContext;

onixParser.prototype.if_elseif = function() {

    var localctx = new If_elseifContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, onixParser.RULE_if_elseif);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        this.match(onixParser.K_ELSE);
        this.state = 418;
        this.match(onixParser.K_IF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function If_elseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_if_else;
    return this;
}

If_elseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_elseContext.prototype.constructor = If_elseContext;

If_elseContext.prototype.K_ELSE = function() {
    return this.getToken(onixParser.K_ELSE, 0);
};

If_elseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitIf_else(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.If_elseContext = If_elseContext;

onixParser.prototype.if_else = function() {

    var localctx = new If_elseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, onixParser.RULE_if_else);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 420;
        this.match(onixParser.K_ELSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function For_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_for_loop;
    this.init = null; // AssignmentContext
    this.test = null; // ExpContext
    return this;
}

For_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_loopContext.prototype.constructor = For_loopContext;

For_loopContext.prototype.K_COUNT = function() {
    return this.getToken(onixParser.K_COUNT, 0);
};

For_loopContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(onixParser.COMMA);
    } else {
        return this.getToken(onixParser.COMMA, i);
    }
};


For_loopContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

For_loopContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

For_loopContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

For_loopContext.prototype.assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentContext);
    } else {
        return this.getTypedRuleContext(AssignmentContext,i);
    }
};

For_loopContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

For_loopContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

For_loopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitFor_loop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.For_loopContext = For_loopContext;

onixParser.prototype.for_loop = function() {

    var localctx = new For_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, onixParser.RULE_for_loop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 422;
        this.match(onixParser.K_COUNT);
        this.state = 423;
        localctx.init = this.assignment();
        this.state = 424;
        this.match(onixParser.COMMA);
        this.state = 425;
        localctx.test = this.exp(0);
        this.state = 426;
        this.match(onixParser.COMMA);
        this.state = 429;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.state = 427;
            this.assignment();
            break;

        case 2:
            this.state = 428;
            this.postfixExpression(0);
            break;

        }
        this.state = 431;
        this.match(onixParser.COLON);
        this.state = 432;
        this.body();
        this.state = 433;
        this.match(onixParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Range_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_range_loop;
    this.startExp = null; // ExpContext
    this.endExp = null; // ExpContext
    return this;
}

Range_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_loopContext.prototype.constructor = Range_loopContext;

Range_loopContext.prototype.K_FOR = function() {
    return this.getToken(onixParser.K_FOR, 0);
};

Range_loopContext.prototype.K_EACH = function() {
    return this.getToken(onixParser.K_EACH, 0);
};

Range_loopContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Range_loopContext.prototype.DOUBLE_PERIOD = function() {
    return this.getToken(onixParser.DOUBLE_PERIOD, 0);
};

Range_loopContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Range_loopContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Range_loopContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

Range_loopContext.prototype.K_IN = function() {
    return this.getToken(onixParser.K_IN, 0);
};

Range_loopContext.prototype.K_OF = function() {
    return this.getToken(onixParser.K_OF, 0);
};

Range_loopContext.prototype.exp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpContext);
    } else {
        return this.getTypedRuleContext(ExpContext,i);
    }
};

Range_loopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitRange_loop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Range_loopContext = Range_loopContext;

onixParser.prototype.range_loop = function() {

    var localctx = new Range_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, onixParser.RULE_range_loop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 435;
        this.match(onixParser.K_FOR);
        this.state = 436;
        this.match(onixParser.K_EACH);
        this.state = 437;
        this.identifier();
        this.state = 438;
        _la = this._input.LA(1);
        if(!(_la===onixParser.K_OF || _la===onixParser.K_IN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 439;
        localctx.startExp = this.exp(0);
        this.state = 440;
        this.match(onixParser.DOUBLE_PERIOD);
        this.state = 441;
        localctx.endExp = this.exp(0);
        this.state = 442;
        this.match(onixParser.COLON);
        this.state = 443;
        this.body();
        this.state = 444;
        this.match(onixParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function For_each_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_for_each_loop;
    return this;
}

For_each_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_each_loopContext.prototype.constructor = For_each_loopContext;

For_each_loopContext.prototype.K_FOR = function() {
    return this.getToken(onixParser.K_FOR, 0);
};

For_each_loopContext.prototype.K_EACH = function() {
    return this.getToken(onixParser.K_EACH, 0);
};

For_each_loopContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

For_each_loopContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

For_each_loopContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

For_each_loopContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

For_each_loopContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

For_each_loopContext.prototype.K_IN = function() {
    return this.getToken(onixParser.K_IN, 0);
};

For_each_loopContext.prototype.K_OF = function() {
    return this.getToken(onixParser.K_OF, 0);
};

For_each_loopContext.prototype.ADDROP = function() {
    return this.getToken(onixParser.ADDROP, 0);
};

For_each_loopContext.prototype.COMMA = function() {
    return this.getToken(onixParser.COMMA, 0);
};

For_each_loopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitFor_each_loop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.For_each_loopContext = For_each_loopContext;

onixParser.prototype.for_each_loop = function() {

    var localctx = new For_each_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, onixParser.RULE_for_each_loop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 446;
        this.match(onixParser.K_FOR);
        this.state = 447;
        this.match(onixParser.K_EACH);
        this.state = 449;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===onixParser.ADDROP) {
            this.state = 448;
            this.match(onixParser.ADDROP);
        }

        this.state = 451;
        this.identifier();
        this.state = 454;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===onixParser.COMMA) {
            this.state = 452;
            this.match(onixParser.COMMA);
            this.state = 453;
            this.identifier();
        }

        this.state = 456;
        _la = this._input.LA(1);
        if(!(_la===onixParser.K_OF || _la===onixParser.K_IN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 457;
        this.postfixExpression(0);
        this.state = 458;
        this.match(onixParser.COLON);
        this.state = 459;
        this.body();
        this.state = 460;
        this.match(onixParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function While_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_while_loop;
    return this;
}

While_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_loopContext.prototype.constructor = While_loopContext;

While_loopContext.prototype.K_WHILE = function() {
    return this.getToken(onixParser.K_WHILE, 0);
};

While_loopContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

While_loopContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

While_loopContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

While_loopContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

While_loopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitWhile_loop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.While_loopContext = While_loopContext;

onixParser.prototype.while_loop = function() {

    var localctx = new While_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, onixParser.RULE_while_loop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 462;
        this.match(onixParser.K_WHILE);
        this.state = 463;
        this.exp(0);
        this.state = 464;
        this.match(onixParser.COLON);
        this.state = 465;
        this.body();
        this.state = 466;
        this.match(onixParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Repeat_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_repeat_loop;
    return this;
}

Repeat_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Repeat_loopContext.prototype.constructor = Repeat_loopContext;

Repeat_loopContext.prototype.K_REPEAT = function() {
    return this.getToken(onixParser.K_REPEAT, 0);
};

Repeat_loopContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Repeat_loopContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Repeat_loopContext.prototype.K_UNTIL = function() {
    return this.getToken(onixParser.K_UNTIL, 0);
};

Repeat_loopContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

Repeat_loopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitRepeat_loop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Repeat_loopContext = Repeat_loopContext;

onixParser.prototype.repeat_loop = function() {

    var localctx = new Repeat_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, onixParser.RULE_repeat_loop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 468;
        this.match(onixParser.K_REPEAT);
        this.state = 469;
        this.match(onixParser.COLON);
        this.state = 470;
        this.body();
        this.state = 471;
        this.match(onixParser.K_UNTIL);
        this.state = 472;
        this.exp(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Think_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_think_loop;
    return this;
}

Think_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Think_loopContext.prototype.constructor = Think_loopContext;

Think_loopContext.prototype.K_LOOP = function() {
    return this.getToken(onixParser.K_LOOP, 0);
};

Think_loopContext.prototype.COLON = function() {
    return this.getToken(onixParser.COLON, 0);
};

Think_loopContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Think_loopContext.prototype.K_END = function() {
    return this.getToken(onixParser.K_END, 0);
};

Think_loopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitThink_loop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.Think_loopContext = Think_loopContext;

onixParser.prototype.think_loop = function() {

    var localctx = new Think_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, onixParser.RULE_think_loop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 474;
        this.match(onixParser.K_LOOP);
        this.state = 475;
        this.match(onixParser.COLON);
        this.state = 476;
        this.body();
        this.state = 477;
        this.match(onixParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.varDeclaration = function() {
    return this.getTypedRuleContext(VarDeclarationContext,0);
};

DeclarationContext.prototype.arrayDeclaration = function() {
    return this.getTypedRuleContext(ArrayDeclarationContext,0);
};

DeclarationContext.prototype.constDeclaration = function() {
    return this.getTypedRuleContext(ConstDeclarationContext,0);
};

DeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.DeclarationContext = DeclarationContext;

onixParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, onixParser.RULE_declaration);
    try {
        this.state = 482;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 479;
            this.varDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 480;
            this.arrayDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 481;
            this.constDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstDecUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_constDecUnit;
    return this;
}

ConstDecUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstDecUnitContext.prototype.constructor = ConstDecUnitContext;

ConstDecUnitContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ConstDecUnitContext.prototype.EQUAL = function() {
    return this.getToken(onixParser.EQUAL, 0);
};

ConstDecUnitContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

ConstDecUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitConstDecUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ConstDecUnitContext = ConstDecUnitContext;

onixParser.prototype.constDecUnit = function() {

    var localctx = new ConstDecUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, onixParser.RULE_constDecUnit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.identifier();
        this.state = 485;
        this.match(onixParser.EQUAL);
        this.state = 486;
        this.exp(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_constDeclaration;
    return this;
}

ConstDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstDeclarationContext.prototype.constructor = ConstDeclarationContext;

ConstDeclarationContext.prototype.K_CONST = function() {
    return this.getToken(onixParser.K_CONST, 0);
};

ConstDeclarationContext.prototype.constDecUnit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstDecUnitContext);
    } else {
        return this.getTypedRuleContext(ConstDecUnitContext,i);
    }
};

ConstDeclarationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(onixParser.COMMA);
    } else {
        return this.getToken(onixParser.COMMA, i);
    }
};


ConstDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitConstDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ConstDeclarationContext = ConstDeclarationContext;

onixParser.prototype.constDeclaration = function() {

    var localctx = new ConstDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, onixParser.RULE_constDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 488;
        this.match(onixParser.K_CONST);
        this.state = 489;
        this.constDecUnit();
        this.state = 494;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===onixParser.COMMA) {
            this.state = 490;
            this.match(onixParser.COMMA);
            this.state = 491;
            this.constDecUnit();
            this.state = 496;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.L_PAR = function() {
    return this.getToken(onixParser.L_PAR, 0);
};

InitializerContext.prototype.expList = function() {
    return this.getTypedRuleContext(ExpListContext,0);
};

InitializerContext.prototype.R_PAR = function() {
    return this.getToken(onixParser.R_PAR, 0);
};

InitializerContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

InitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.InitializerContext = InitializerContext;

onixParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, onixParser.RULE_initializer);
    try {
        this.state = 502;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 497;
            this.match(onixParser.L_PAR);
            this.state = 498;
            this.expList();
            this.state = 499;
            this.match(onixParser.R_PAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 501;
            this.exp(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarDecUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_varDecUnit;
    return this;
}

VarDecUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarDecUnitContext.prototype.constructor = VarDecUnitContext;

VarDecUnitContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

VarDecUnitContext.prototype.EQUAL = function() {
    return this.getToken(onixParser.EQUAL, 0);
};

VarDecUnitContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

VarDecUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitVarDecUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.VarDecUnitContext = VarDecUnitContext;

onixParser.prototype.varDecUnit = function() {

    var localctx = new VarDecUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, onixParser.RULE_varDecUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 504;
        this.identifier();
        this.state = 507;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===onixParser.EQUAL) {
            this.state = 505;
            this.match(onixParser.EQUAL);
            this.state = 506;
            this.initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_varDeclaration;
    return this;
}

VarDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarDeclarationContext.prototype.constructor = VarDeclarationContext;

VarDeclarationContext.prototype.K_VAR = function() {
    return this.getToken(onixParser.K_VAR, 0);
};

VarDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

VarDeclarationContext.prototype.varDecUnit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarDecUnitContext);
    } else {
        return this.getTypedRuleContext(VarDecUnitContext,i);
    }
};

VarDeclarationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(onixParser.COMMA);
    } else {
        return this.getToken(onixParser.COMMA, i);
    }
};


VarDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitVarDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.VarDeclarationContext = VarDeclarationContext;

onixParser.prototype.varDeclaration = function() {

    var localctx = new VarDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, onixParser.RULE_varDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this.match(onixParser.K_VAR);
        this.state = 510;
        this.type();
        this.state = 511;
        this.varDecUnit();
        this.state = 516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===onixParser.COMMA) {
            this.state = 512;
            this.match(onixParser.COMMA);
            this.state = 513;
            this.varDecUnit();
            this.state = 518;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.L_SBRAC = function() {
    return this.getToken(onixParser.L_SBRAC, 0);
};

ArrayInitializerContext.prototype.initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitializerContext);
    } else {
        return this.getTypedRuleContext(InitializerContext,i);
    }
};

ArrayInitializerContext.prototype.R_SBRAC = function() {
    return this.getToken(onixParser.R_SBRAC, 0);
};

ArrayInitializerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(onixParser.COMMA);
    } else {
        return this.getToken(onixParser.COMMA, i);
    }
};


ArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ArrayInitializerContext = ArrayInitializerContext;

onixParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, onixParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this.match(onixParser.L_SBRAC);
        this.state = 520;
        this.initializer();
        this.state = 525;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===onixParser.COMMA) {
            this.state = 521;
            this.match(onixParser.COMMA);
            this.state = 522;
            this.initializer();
            this.state = 527;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 528;
        this.match(onixParser.R_SBRAC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayDecUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_arrayDecUnit;
    return this;
}

ArrayDecUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayDecUnitContext.prototype.constructor = ArrayDecUnitContext;

ArrayDecUnitContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ArrayDecUnitContext.prototype.L_SBRAC = function() {
    return this.getToken(onixParser.L_SBRAC, 0);
};

ArrayDecUnitContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

ArrayDecUnitContext.prototype.R_SBRAC = function() {
    return this.getToken(onixParser.R_SBRAC, 0);
};

ArrayDecUnitContext.prototype.EQUAL = function() {
    return this.getToken(onixParser.EQUAL, 0);
};

ArrayDecUnitContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

ArrayDecUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitArrayDecUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ArrayDecUnitContext = ArrayDecUnitContext;

onixParser.prototype.arrayDecUnit = function() {

    var localctx = new ArrayDecUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, onixParser.RULE_arrayDecUnit);
    try {
        this.state = 539;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 530;
            this.identifier();
            this.state = 531;
            this.match(onixParser.L_SBRAC);
            this.state = 532;
            this.exp(0);
            this.state = 533;
            this.match(onixParser.R_SBRAC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 535;
            this.identifier();
            this.state = 536;
            this.match(onixParser.EQUAL);
            this.state = 537;
            this.arrayInitializer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_arrayDeclaration;
    return this;
}

ArrayDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayDeclarationContext.prototype.constructor = ArrayDeclarationContext;

ArrayDeclarationContext.prototype.K_VAR = function() {
    return this.getToken(onixParser.K_VAR, 0);
};

ArrayDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ArrayDeclarationContext.prototype.arrayDecUnit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayDecUnitContext);
    } else {
        return this.getTypedRuleContext(ArrayDecUnitContext,i);
    }
};

ArrayDeclarationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(onixParser.COMMA);
    } else {
        return this.getToken(onixParser.COMMA, i);
    }
};


ArrayDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitArrayDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ArrayDeclarationContext = ArrayDeclarationContext;

onixParser.prototype.arrayDeclaration = function() {

    var localctx = new ArrayDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, onixParser.RULE_arrayDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 541;
        this.match(onixParser.K_VAR);
        this.state = 542;
        this.type();
        this.state = 543;
        this.arrayDecUnit();
        this.state = 548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===onixParser.COMMA) {
            this.state = 544;
            this.match(onixParser.COMMA);
            this.state = 545;
            this.arrayDecUnit();
            this.state = 550;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_assignmentUnit;
    return this;
}

AssignmentUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentUnitContext.prototype.constructor = AssignmentUnitContext;

AssignmentUnitContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

AssignmentUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitAssignmentUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.AssignmentUnitContext = AssignmentUnitContext;

onixParser.prototype.assignmentUnit = function() {

    var localctx = new AssignmentUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, onixParser.RULE_assignmentUnit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 551;
        this.postfixExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_assignment;
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.assignmentUnit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentUnitContext);
    } else {
        return this.getTypedRuleContext(AssignmentUnitContext,i);
    }
};

AssignmentContext.prototype.assignOp = function() {
    return this.getTypedRuleContext(AssignOpContext,0);
};

AssignmentContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

AssignmentContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(onixParser.COMMA);
    } else {
        return this.getToken(onixParser.COMMA, i);
    }
};


AssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.AssignmentContext = AssignmentContext;

onixParser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, onixParser.RULE_assignment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.assignmentUnit();
        this.state = 558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===onixParser.COMMA) {
            this.state = 554;
            this.match(onixParser.COMMA);
            this.state = 555;
            this.assignmentUnit();
            this.state = 560;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 561;
        this.assignOp();
        this.state = 562;
        this.exp(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_assignOp;
    return this;
}

AssignOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignOpContext.prototype.constructor = AssignOpContext;

AssignOpContext.prototype.EQUAL = function() {
    return this.getToken(onixParser.EQUAL, 0);
};

AssignOpContext.prototype.PLUS_ASSIGN = function() {
    return this.getToken(onixParser.PLUS_ASSIGN, 0);
};

AssignOpContext.prototype.MINUS_ASSIGN = function() {
    return this.getToken(onixParser.MINUS_ASSIGN, 0);
};

AssignOpContext.prototype.MULT_ASSIGN = function() {
    return this.getToken(onixParser.MULT_ASSIGN, 0);
};

AssignOpContext.prototype.DIV_ASSIGN = function() {
    return this.getToken(onixParser.DIV_ASSIGN, 0);
};

AssignOpContext.prototype.OR_ASSIGN = function() {
    return this.getToken(onixParser.OR_ASSIGN, 0);
};

AssignOpContext.prototype.AND_ASSIGN = function() {
    return this.getToken(onixParser.AND_ASSIGN, 0);
};

AssignOpContext.prototype.LSH_ASSIGN = function() {
    return this.getToken(onixParser.LSH_ASSIGN, 0);
};

AssignOpContext.prototype.RSH_ASSIGN = function() {
    return this.getToken(onixParser.RSH_ASSIGN, 0);
};

AssignOpContext.prototype.XOR_ASSIGN = function() {
    return this.getToken(onixParser.XOR_ASSIGN, 0);
};

AssignOpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitAssignOp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.AssignOpContext = AssignOpContext;

onixParser.prototype.assignOp = function() {

    var localctx = new AssignOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, onixParser.RULE_assignOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 564;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << onixParser.EQUAL) | (1 << onixParser.PLUS_ASSIGN) | (1 << onixParser.MINUS_ASSIGN) | (1 << onixParser.MULT_ASSIGN) | (1 << onixParser.DIV_ASSIGN) | (1 << onixParser.LSH_ASSIGN) | (1 << onixParser.RSH_ASSIGN) | (1 << onixParser.AND_ASSIGN) | (1 << onixParser.XOR_ASSIGN) | (1 << onixParser.OR_ASSIGN))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_unaryOp;
    return this;
}

UnaryOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOpContext.prototype.constructor = UnaryOpContext;

UnaryOpContext.prototype.INCREMENT = function() {
    return this.getToken(onixParser.INCREMENT, 0);
};

UnaryOpContext.prototype.DECREMENT = function() {
    return this.getToken(onixParser.DECREMENT, 0);
};

UnaryOpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitUnaryOp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.UnaryOpContext = UnaryOpContext;

onixParser.prototype.unaryOp = function() {

    var localctx = new UnaryOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, onixParser.RULE_unaryOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        _la = this._input.LA(1);
        if(!(_la===onixParser.INCREMENT || _la===onixParser.DECREMENT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_propOp;
    return this;
}

PropOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropOpContext.prototype.constructor = PropOpContext;

PropOpContext.prototype.PERIOD = function() {
    return this.getToken(onixParser.PERIOD, 0);
};

PropOpContext.prototype.DOUBLE_COLON = function() {
    return this.getToken(onixParser.DOUBLE_COLON, 0);
};

PropOpContext.prototype.ARROW = function() {
    return this.getToken(onixParser.ARROW, 0);
};

PropOpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitPropOp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.PropOpContext = PropOpContext;

onixParser.prototype.propOp = function() {

    var localctx = new PropOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, onixParser.RULE_propOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 568;
        _la = this._input.LA(1);
        if(!(((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (onixParser.PERIOD - 42)) | (1 << (onixParser.DOUBLE_COLON - 42)) | (1 << (onixParser.ARROW - 42)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrimaryExpressionContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

PrimaryExpressionContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

PrimaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitPrimaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.PrimaryExpressionContext = PrimaryExpressionContext;

onixParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, onixParser.RULE_primaryExpression);
    try {
        this.state = 573;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case onixParser.NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 570;
            this.identifier();
            break;
        case onixParser.K_FALSE:
        case onixParser.K_TRUE:
        case onixParser.INT:
        case onixParser.HEX:
        case onixParser.BIN:
        case onixParser.FLOAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 571;
            this.number();
            break;
        case onixParser.StringLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 572;
            this.string();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_postfixExpression;
    return this;
}

PostfixExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixExpressionContext.prototype.constructor = PostfixExpressionContext;

PostfixExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

PostfixExpressionContext.prototype.ADDROP = function() {
    return this.getToken(onixParser.ADDROP, 0);
};

PostfixExpressionContext.prototype.postfixExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PostfixExpressionContext);
    } else {
        return this.getTypedRuleContext(PostfixExpressionContext,i);
    }
};

PostfixExpressionContext.prototype.L_BRAC = function() {
    return this.getToken(onixParser.L_BRAC, 0);
};

PostfixExpressionContext.prototype.R_BRAC = function() {
    return this.getToken(onixParser.R_BRAC, 0);
};

PostfixExpressionContext.prototype.propOp = function() {
    return this.getTypedRuleContext(PropOpContext,0);
};

PostfixExpressionContext.prototype.L_PAR = function() {
    return this.getToken(onixParser.L_PAR, 0);
};

PostfixExpressionContext.prototype.R_PAR = function() {
    return this.getToken(onixParser.R_PAR, 0);
};

PostfixExpressionContext.prototype.expList = function() {
    return this.getTypedRuleContext(ExpListContext,0);
};

PostfixExpressionContext.prototype.L_SBRAC = function() {
    return this.getToken(onixParser.L_SBRAC, 0);
};

PostfixExpressionContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

PostfixExpressionContext.prototype.R_SBRAC = function() {
    return this.getToken(onixParser.R_SBRAC, 0);
};

PostfixExpressionContext.prototype.DECREMENT = function() {
    return this.getToken(onixParser.DECREMENT, 0);
};

PostfixExpressionContext.prototype.INCREMENT = function() {
    return this.getToken(onixParser.INCREMENT, 0);
};

PostfixExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitPostfixExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



onixParser.prototype.postfixExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PostfixExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 104;
    this.enterRecursionRule(localctx, 104, onixParser.RULE_postfixExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case onixParser.StringLiteral:
        case onixParser.K_FALSE:
        case onixParser.K_TRUE:
        case onixParser.NAME:
        case onixParser.INT:
        case onixParser.HEX:
        case onixParser.BIN:
        case onixParser.FLOAT:
            this.state = 576;
            this.primaryExpression();
            break;
        case onixParser.ADDROP:
            this.state = 577;
            this.match(onixParser.ADDROP);
            this.state = 578;
            this.postfixExpression(2);
            break;
        case onixParser.L_BRAC:
            this.state = 579;
            this.match(onixParser.L_BRAC);
            this.state = 580;
            this.postfixExpression(0);
            this.state = 581;
            this.match(onixParser.R_BRAC);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 606;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 604;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_postfixExpression);
                    this.state = 585;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 586;
                    this.propOp();
                    this.state = 587;
                    this.postfixExpression(7);
                    break;

                case 2:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_postfixExpression);
                    this.state = 589;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 590;
                    this.match(onixParser.L_PAR);
                    this.state = 592;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (onixParser.StringLiteral - 2)) | (1 << (onixParser.L_PAR - 2)) | (1 << (onixParser.L_BRAC - 2)) | (1 << (onixParser.MINUS - 2)) | (1 << (onixParser.NEGATION - 2)) | (1 << (onixParser.ADDROP - 2)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (onixParser.K_FALSE - 79)) | (1 << (onixParser.K_TRUE - 79)) | (1 << (onixParser.NAME - 79)) | (1 << (onixParser.INT - 79)) | (1 << (onixParser.HEX - 79)) | (1 << (onixParser.BIN - 79)) | (1 << (onixParser.FLOAT - 79)))) !== 0)) {
                        this.state = 591;
                        this.expList();
                    }

                    this.state = 594;
                    this.match(onixParser.R_PAR);
                    break;

                case 3:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_postfixExpression);
                    this.state = 595;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 596;
                    this.match(onixParser.L_SBRAC);
                    this.state = 597;
                    this.exp(0);
                    this.state = 598;
                    this.match(onixParser.R_SBRAC);
                    break;

                case 4:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_postfixExpression);
                    this.state = 600;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 601;
                    this.match(onixParser.DECREMENT);
                    break;

                case 5:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_postfixExpression);
                    this.state = 602;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 603;
                    this.match(onixParser.INCREMENT);
                    break;

                } 
            }
            this.state = 608;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_exp;
    return this;
}

ExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpContext.prototype.constructor = ExpContext;

ExpContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

ExpContext.prototype.unary = function() {
    return this.getTypedRuleContext(UnaryContext,0);
};

ExpContext.prototype.exp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpContext);
    } else {
        return this.getTypedRuleContext(ExpContext,i);
    }
};

ExpContext.prototype.L_PAR = function() {
    return this.getToken(onixParser.L_PAR, 0);
};

ExpContext.prototype.R_PAR = function() {
    return this.getToken(onixParser.R_PAR, 0);
};

ExpContext.prototype.multiplicative = function() {
    return this.getTypedRuleContext(MultiplicativeContext,0);
};

ExpContext.prototype.additive = function() {
    return this.getTypedRuleContext(AdditiveContext,0);
};

ExpContext.prototype.shift = function() {
    return this.getTypedRuleContext(ShiftContext,0);
};

ExpContext.prototype.relational = function() {
    return this.getTypedRuleContext(RelationalContext,0);
};

ExpContext.prototype.equality = function() {
    return this.getTypedRuleContext(EqualityContext,0);
};

ExpContext.prototype.bitAnd = function() {
    return this.getTypedRuleContext(BitAndContext,0);
};

ExpContext.prototype.bitXor = function() {
    return this.getTypedRuleContext(BitXorContext,0);
};

ExpContext.prototype.bitOr = function() {
    return this.getTypedRuleContext(BitOrContext,0);
};

ExpContext.prototype.boolAnd = function() {
    return this.getTypedRuleContext(BoolAndContext,0);
};

ExpContext.prototype.boolOr = function() {
    return this.getTypedRuleContext(BoolOrContext,0);
};

ExpContext.prototype.K_AS = function() {
    return this.getToken(onixParser.K_AS, 0);
};

ExpContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ExpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitExp(this);
    } else {
        return visitor.visitChildren(this);
    }
};



onixParser.prototype.exp = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 106;
    this.enterRecursionRule(localctx, 106, onixParser.RULE_exp, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case onixParser.StringLiteral:
        case onixParser.L_BRAC:
        case onixParser.ADDROP:
        case onixParser.K_FALSE:
        case onixParser.K_TRUE:
        case onixParser.NAME:
        case onixParser.INT:
        case onixParser.HEX:
        case onixParser.BIN:
        case onixParser.FLOAT:
            this.state = 610;
            this.postfixExpression(0);
            break;
        case onixParser.MINUS:
        case onixParser.NEGATION:
            this.state = 611;
            this.unary();
            this.state = 612;
            this.exp(13);
            break;
        case onixParser.L_PAR:
            this.state = 614;
            this.match(onixParser.L_PAR);
            this.state = 615;
            this.exp(0);
            this.state = 616;
            this.match(onixParser.R_PAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 665;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 663;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 620;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 621;
                    this.multiplicative();
                    this.state = 622;
                    this.exp(12);
                    break;

                case 2:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 624;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 625;
                    this.additive();
                    this.state = 626;
                    this.exp(11);
                    break;

                case 3:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 628;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 629;
                    this.shift();
                    this.state = 630;
                    this.exp(10);
                    break;

                case 4:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 632;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 633;
                    this.relational();
                    this.state = 634;
                    this.exp(9);
                    break;

                case 5:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 636;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 637;
                    this.equality();
                    this.state = 638;
                    this.exp(8);
                    break;

                case 6:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 640;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 641;
                    this.bitAnd();
                    this.state = 642;
                    this.exp(7);
                    break;

                case 7:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 644;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 645;
                    this.bitXor();
                    this.state = 646;
                    this.exp(6);
                    break;

                case 8:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 648;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 649;
                    this.bitOr();
                    this.state = 650;
                    this.exp(5);
                    break;

                case 9:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 652;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 653;
                    this.boolAnd();
                    this.state = 654;
                    this.exp(4);
                    break;

                case 10:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 656;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 657;
                    this.boolOr();
                    this.state = 658;
                    this.exp(3);
                    break;

                case 11:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, onixParser.RULE_exp);
                    this.state = 660;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 661;
                    this.match(onixParser.K_AS);
                    this.state = 662;
                    this.type();
                    break;

                } 
            }
            this.state = 667;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function MultiplicativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_multiplicative;
    return this;
}

MultiplicativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeContext.prototype.constructor = MultiplicativeContext;

MultiplicativeContext.prototype.DIV = function() {
    return this.getToken(onixParser.DIV, 0);
};

MultiplicativeContext.prototype.MOD = function() {
    return this.getToken(onixParser.MOD, 0);
};

MultiplicativeContext.prototype.MULT = function() {
    return this.getToken(onixParser.MULT, 0);
};

MultiplicativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitMultiplicative(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.MultiplicativeContext = MultiplicativeContext;

onixParser.prototype.multiplicative = function() {

    var localctx = new MultiplicativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, onixParser.RULE_multiplicative);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << onixParser.MULT) | (1 << onixParser.DIV) | (1 << onixParser.MOD))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AdditiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_additive;
    return this;
}

AdditiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveContext.prototype.constructor = AdditiveContext;

AdditiveContext.prototype.PLUS = function() {
    return this.getToken(onixParser.PLUS, 0);
};

AdditiveContext.prototype.MINUS = function() {
    return this.getToken(onixParser.MINUS, 0);
};

AdditiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitAdditive(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.AdditiveContext = AdditiveContext;

onixParser.prototype.additive = function() {

    var localctx = new AdditiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, onixParser.RULE_additive);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        _la = this._input.LA(1);
        if(!(_la===onixParser.PLUS || _la===onixParser.MINUS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShiftContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_shift;
    return this;
}

ShiftContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftContext.prototype.constructor = ShiftContext;

ShiftContext.prototype.BITWISE_LSH = function() {
    return this.getToken(onixParser.BITWISE_LSH, 0);
};

ShiftContext.prototype.BITWISE_RSH = function() {
    return this.getToken(onixParser.BITWISE_RSH, 0);
};

ShiftContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitShift(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ShiftContext = ShiftContext;

onixParser.prototype.shift = function() {

    var localctx = new ShiftContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, onixParser.RULE_shift);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 672;
        _la = this._input.LA(1);
        if(!(_la===onixParser.BITWISE_LSH || _la===onixParser.BITWISE_RSH)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_relational;
    return this;
}

RelationalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalContext.prototype.constructor = RelationalContext;

RelationalContext.prototype.LESSER_THAN = function() {
    return this.getToken(onixParser.LESSER_THAN, 0);
};

RelationalContext.prototype.GREATER_THAN = function() {
    return this.getToken(onixParser.GREATER_THAN, 0);
};

RelationalContext.prototype.LESSER_EQUAL = function() {
    return this.getToken(onixParser.LESSER_EQUAL, 0);
};

RelationalContext.prototype.GREATER_EQUAL = function() {
    return this.getToken(onixParser.GREATER_EQUAL, 0);
};

RelationalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitRelational(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.RelationalContext = RelationalContext;

onixParser.prototype.relational = function() {

    var localctx = new RelationalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, onixParser.RULE_relational);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 674;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << onixParser.LESSER_THAN) | (1 << onixParser.GREATER_THAN) | (1 << onixParser.LESSER_EQUAL) | (1 << onixParser.GREATER_EQUAL))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EqualityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_equality;
    return this;
}

EqualityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityContext.prototype.constructor = EqualityContext;

EqualityContext.prototype.EQUALS_TO = function() {
    return this.getToken(onixParser.EQUALS_TO, 0);
};

EqualityContext.prototype.NOT_EQUAL = function() {
    return this.getToken(onixParser.NOT_EQUAL, 0);
};

EqualityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitEquality(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.EqualityContext = EqualityContext;

onixParser.prototype.equality = function() {

    var localctx = new EqualityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, onixParser.RULE_equality);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 676;
        _la = this._input.LA(1);
        if(!(_la===onixParser.NOT_EQUAL || _la===onixParser.EQUALS_TO)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitAndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_bitAnd;
    return this;
}

BitAndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitAndContext.prototype.constructor = BitAndContext;

BitAndContext.prototype.BITWISE_AND = function() {
    return this.getToken(onixParser.BITWISE_AND, 0);
};

BitAndContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitBitAnd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.BitAndContext = BitAndContext;

onixParser.prototype.bitAnd = function() {

    var localctx = new BitAndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, onixParser.RULE_bitAnd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 678;
        this.match(onixParser.BITWISE_AND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitXorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_bitXor;
    return this;
}

BitXorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitXorContext.prototype.constructor = BitXorContext;

BitXorContext.prototype.BITWISE_XOR = function() {
    return this.getToken(onixParser.BITWISE_XOR, 0);
};

BitXorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitBitXor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.BitXorContext = BitXorContext;

onixParser.prototype.bitXor = function() {

    var localctx = new BitXorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, onixParser.RULE_bitXor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 680;
        this.match(onixParser.BITWISE_XOR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitOrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_bitOr;
    return this;
}

BitOrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitOrContext.prototype.constructor = BitOrContext;

BitOrContext.prototype.BITWISE_OR = function() {
    return this.getToken(onixParser.BITWISE_OR, 0);
};

BitOrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitBitOr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.BitOrContext = BitOrContext;

onixParser.prototype.bitOr = function() {

    var localctx = new BitOrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, onixParser.RULE_bitOr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 682;
        this.match(onixParser.BITWISE_OR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BoolAndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_boolAnd;
    return this;
}

BoolAndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoolAndContext.prototype.constructor = BoolAndContext;

BoolAndContext.prototype.BOOL_AND = function() {
    return this.getToken(onixParser.BOOL_AND, 0);
};

BoolAndContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitBoolAnd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.BoolAndContext = BoolAndContext;

onixParser.prototype.boolAnd = function() {

    var localctx = new BoolAndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, onixParser.RULE_boolAnd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;
        this.match(onixParser.BOOL_AND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BoolOrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_boolOr;
    return this;
}

BoolOrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoolOrContext.prototype.constructor = BoolOrContext;

BoolOrContext.prototype.BOOL_OR = function() {
    return this.getToken(onixParser.BOOL_OR, 0);
};

BoolOrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitBoolOr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.BoolOrContext = BoolOrContext;

onixParser.prototype.boolOr = function() {

    var localctx = new BoolOrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, onixParser.RULE_boolOr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 686;
        this.match(onixParser.BOOL_OR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_expList;
    return this;
}

ExpListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpListContext.prototype.constructor = ExpListContext;

ExpListContext.prototype.exp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpContext);
    } else {
        return this.getTypedRuleContext(ExpContext,i);
    }
};

ExpListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(onixParser.COMMA);
    } else {
        return this.getToken(onixParser.COMMA, i);
    }
};


ExpListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitExpList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.ExpListContext = ExpListContext;

onixParser.prototype.expList = function() {

    var localctx = new ExpListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, onixParser.RULE_expList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 688;
        this.exp(0);
        this.state = 693;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===onixParser.COMMA) {
            this.state = 689;
            this.match(onixParser.COMMA);
            this.state = 690;
            this.exp(0);
            this.state = 695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;

NumberContext.prototype.BIN = function() {
    return this.getToken(onixParser.BIN, 0);
};

NumberContext.prototype.HEX = function() {
    return this.getToken(onixParser.HEX, 0);
};

NumberContext.prototype.INT = function() {
    return this.getToken(onixParser.INT, 0);
};

NumberContext.prototype.FLOAT = function() {
    return this.getToken(onixParser.FLOAT, 0);
};

NumberContext.prototype.K_FALSE = function() {
    return this.getToken(onixParser.K_FALSE, 0);
};

NumberContext.prototype.K_TRUE = function() {
    return this.getToken(onixParser.K_TRUE, 0);
};

NumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitNumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.NumberContext = NumberContext;

onixParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, onixParser.RULE_number);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 696;
        _la = this._input.LA(1);
        if(!(((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (onixParser.K_FALSE - 79)) | (1 << (onixParser.K_TRUE - 79)) | (1 << (onixParser.INT - 79)) | (1 << (onixParser.HEX - 79)) | (1 << (onixParser.BIN - 79)) | (1 << (onixParser.FLOAT - 79)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.StringLiteral = function() {
    return this.getToken(onixParser.StringLiteral, 0);
};

StringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitString(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.StringContext = StringContext;

onixParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, onixParser.RULE_string);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698;
        this.match(onixParser.StringLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.K_BYTE = function() {
    return this.getToken(onixParser.K_BYTE, 0);
};

TypeContext.prototype.K_INT = function() {
    return this.getToken(onixParser.K_INT, 0);
};

TypeContext.prototype.K_LONG = function() {
    return this.getToken(onixParser.K_LONG, 0);
};

TypeContext.prototype.K_FLOAT = function() {
    return this.getToken(onixParser.K_FLOAT, 0);
};

TypeContext.prototype.K_STRING = function() {
    return this.getToken(onixParser.K_STRING, 0);
};

TypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeContext.prototype.ADDROP = function() {
    return this.getToken(onixParser.ADDROP, 0);
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.TypeContext = TypeContext;

onixParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, onixParser.RULE_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 706;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case onixParser.K_BYTE:
            this.state = 700;
            this.match(onixParser.K_BYTE);
            break;
        case onixParser.K_INT:
            this.state = 701;
            this.match(onixParser.K_INT);
            break;
        case onixParser.K_LONG:
            this.state = 702;
            this.match(onixParser.K_LONG);
            break;
        case onixParser.K_FLOAT:
            this.state = 703;
            this.match(onixParser.K_FLOAT);
            break;
        case onixParser.K_STRING:
            this.state = 704;
            this.match(onixParser.K_STRING);
            break;
        case onixParser.NAME:
            this.state = 705;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 709;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        if(la_===1) {
            this.state = 708;
            this.match(onixParser.ADDROP);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_unary;
    return this;
}

UnaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryContext.prototype.constructor = UnaryContext;

UnaryContext.prototype.MINUS = function() {
    return this.getToken(onixParser.MINUS, 0);
};

UnaryContext.prototype.NEGATION = function() {
    return this.getToken(onixParser.NEGATION, 0);
};

UnaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitUnary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.UnaryContext = UnaryContext;

onixParser.prototype.unary = function() {

    var localctx = new UnaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, onixParser.RULE_unary);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 711;
        _la = this._input.LA(1);
        if(!(_la===onixParser.MINUS || _la===onixParser.NEGATION)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = onixParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.NAME = function() {
    return this.getToken(onixParser.NAME, 0);
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof onixVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




onixParser.IdentifierContext = IdentifierContext;

onixParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, onixParser.RULE_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.match(onixParser.NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


onixParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 52:
			return this.postfixExpression_sempred(localctx, predIndex);
	case 53:
			return this.exp_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

onixParser.prototype.postfixExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 6);
		case 1:
			return this.precpred(this._ctx, 7);
		case 2:
			return this.precpred(this._ctx, 5);
		case 3:
			return this.precpred(this._ctx, 4);
		case 4:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

onixParser.prototype.exp_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 11);
		case 6:
			return this.precpred(this._ctx, 10);
		case 7:
			return this.precpred(this._ctx, 9);
		case 8:
			return this.precpred(this._ctx, 8);
		case 9:
			return this.precpred(this._ctx, 7);
		case 10:
			return this.precpred(this._ctx, 6);
		case 11:
			return this.precpred(this._ctx, 5);
		case 12:
			return this.precpred(this._ctx, 4);
		case 13:
			return this.precpred(this._ctx, 3);
		case 14:
			return this.precpred(this._ctx, 2);
		case 15:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.onixParser = onixParser;
